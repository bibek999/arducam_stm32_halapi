
arducam_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005e24  08005e24  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e24  08005e24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000074  08005ea0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005ea0  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec84  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed5  00000000  00000000  0002ed21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187f0  00000000  00000000  00032398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e08d  00000000  00000000  0004ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884fc  00000000  00000000  00058c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000e1164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004eb4 	.word	0x08004eb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004eb4 	.word	0x08004eb4

0800014c <ArduCAM_Init>:
byte m_fmt = JPEG;
uint32_t length = 0;
uint8_t is_header= false ;

void ArduCAM_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  wrSensorReg16_8(0x3008, 0x80);
 8000150:	2180      	movs	r1, #128	; 0x80
 8000152:	f243 0008 	movw	r0, #12296	; 0x3008
 8000156:	f000 f92b 	bl	80003b0 <wrSensorReg16_8>
	  WRSensorRegs16_8(OV5642_QVGA_Preview);
 800015a:	4811      	ldr	r0, [pc, #68]	; (80001a0 <ArduCAM_Init+0x54>)
 800015c:	f000 f944 	bl	80003e8 <WRSensorRegs16_8>
	  HAL_Delay(100);
 8000160:	2064      	movs	r0, #100	; 0x64
 8000162:	f000 fe5f 	bl	8000e24 <HAL_Delay>
	  WRSensorRegs16_8(OV5642_JPEG_Capture_QSXGA);
 8000166:	480f      	ldr	r0, [pc, #60]	; (80001a4 <ArduCAM_Init+0x58>)
 8000168:	f000 f93e 	bl	80003e8 <WRSensorRegs16_8>
	  WRSensorRegs16_8(ov5642_320x240);
 800016c:	480e      	ldr	r0, [pc, #56]	; (80001a8 <ArduCAM_Init+0x5c>)
 800016e:	f000 f93b 	bl	80003e8 <WRSensorRegs16_8>
	  wrSensorReg16_8(0x3818, 0xa8);
 8000172:	21a8      	movs	r1, #168	; 0xa8
 8000174:	f643 0018 	movw	r0, #14360	; 0x3818
 8000178:	f000 f91a 	bl	80003b0 <wrSensorReg16_8>
	  wrSensorReg16_8(0x3621, 0x10);
 800017c:	2110      	movs	r1, #16
 800017e:	f243 6021 	movw	r0, #13857	; 0x3621
 8000182:	f000 f915 	bl	80003b0 <wrSensorReg16_8>
	  wrSensorReg16_8(0x3801, 0xb0);
 8000186:	21b0      	movs	r1, #176	; 0xb0
 8000188:	f643 0001 	movw	r0, #14337	; 0x3801
 800018c:	f000 f910 	bl	80003b0 <wrSensorReg16_8>
	  wrSensorReg16_8(0x4407, 0x04);
 8000190:	2104      	movs	r1, #4
 8000192:	f244 4007 	movw	r0, #17415	; 0x4407
 8000196:	f000 f90b 	bl	80003b0 <wrSensorReg16_8>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	08005320 	.word	0x08005320
 80001a4:	08005c40 	.word	0x08005c40
 80001a8:	08004fc0 	.word	0x08004fc0

080001ac <CS_HIGH>:


//Control the CS pin
void CS_HIGH(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2110      	movs	r1, #16
 80001b4:	4802      	ldr	r0, [pc, #8]	; (80001c0 <CS_HIGH+0x14>)
 80001b6:	f001 f8c1 	bl	800133c <HAL_GPIO_WritePin>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010800 	.word	0x40010800

080001c4 <CS_LOW>:

void CS_LOW(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2110      	movs	r1, #16
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <CS_LOW+0x14>)
 80001ce:	f001 f8b5 	bl	800133c <HAL_GPIO_WritePin>
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010800 	.word	0x40010800

080001dc <set_format>:

void set_format(byte fmt)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if (fmt == BMP)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d103      	bne.n	80001f4 <set_format+0x18>
    m_fmt = BMP;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <set_format+0x28>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 80001f2:	e002      	b.n	80001fa <set_format+0x1e>
    m_fmt = JPEG;
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <set_format+0x28>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000000 	.word	0x20000000

08000208 <read_reg>:

uint8_t read_reg(uint8_t address)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	 uint8_t data = 0x00;
 8000212:	2300      	movs	r3, #0
 8000214:	73fb      	strb	r3, [r7, #15]
     CS_LOW();
 8000216:	f7ff ffd5 	bl	80001c4 <CS_LOW>
     HAL_SPI_Transmit(&hspi2, &address, sizeof(address), 500);
 800021a:	1df9      	adds	r1, r7, #7
 800021c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000220:	2201      	movs	r2, #1
 8000222:	480d      	ldr	r0, [pc, #52]	; (8000258 <read_reg+0x50>)
 8000224:	f002 ff0e 	bl	8003044 <HAL_SPI_Transmit>
	 HAL_SPI_Transmit(&hspi2, &data, sizeof(data), 500);
 8000228:	f107 010f 	add.w	r1, r7, #15
 800022c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000230:	2201      	movs	r2, #1
 8000232:	4809      	ldr	r0, [pc, #36]	; (8000258 <read_reg+0x50>)
 8000234:	f002 ff06 	bl	8003044 <HAL_SPI_Transmit>
	 HAL_SPI_Receive(&hspi2, &data, sizeof(data), 500);
 8000238:	f107 010f 	add.w	r1, r7, #15
 800023c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000240:	2201      	movs	r2, #1
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <read_reg+0x50>)
 8000244:	f003 f841 	bl	80032ca <HAL_SPI_Receive>
	 CS_HIGH();
 8000248:	f7ff ffb0 	bl	80001ac <CS_HIGH>
	 return data;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000009c 	.word	0x2000009c

0800025c <write_reg>:

void write_reg(uint8_t address, uint8_t value)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	460a      	mov	r2, r1
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	4613      	mov	r3, r2
 800026a:	71bb      	strb	r3, [r7, #6]
	uint8_t add = 0x80 | address;
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000272:	b2db      	uxtb	r3, r3
 8000274:	73fb      	strb	r3, [r7, #15]
	CS_LOW();
 8000276:	f7ff ffa5 	bl	80001c4 <CS_LOW>
	HAL_SPI_Transmit(&hspi2, &add, sizeof(add), 100);
 800027a:	f107 010f 	add.w	r1, r7, #15
 800027e:	2364      	movs	r3, #100	; 0x64
 8000280:	2201      	movs	r2, #1
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <write_reg+0x44>)
 8000284:	f002 fede 	bl	8003044 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &value, sizeof(value), 100);
 8000288:	1db9      	adds	r1, r7, #6
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	2201      	movs	r2, #1
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <write_reg+0x44>)
 8000290:	f002 fed8 	bl	8003044 <HAL_SPI_Transmit>
	CS_HIGH();
 8000294:	f7ff ff8a 	bl	80001ac <CS_HIGH>
}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000009c 	.word	0x2000009c

080002a4 <read_fifo>:


uint8_t read_fifo(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data;
	data = read_reg(SINGLE_FIFO_READ);
 80002aa:	203d      	movs	r0, #61	; 0x3d
 80002ac:	f7ff ffac 	bl	8000208 <read_reg>
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	return data;
 80002b4:	79fb      	ldrb	r3, [r7, #7]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <flush_fifo>:
//	SPI1_ReadWriteByte(BURST_FIFO_READ);
//}


void flush_fifo(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2004      	movs	r0, #4
 80002c6:	f7ff ffc9 	bl	800025c <write_reg>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}

080002ce <clear_fifo_flag>:
{
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
}

void clear_fifo_flag(void )
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 80002d2:	2101      	movs	r1, #1
 80002d4:	2004      	movs	r0, #4
 80002d6:	f7ff ffc1 	bl	800025c <write_reg>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}

080002de <get_bit>:
	write_reg(addr, tem & (~bit));
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b084      	sub	sp, #16
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	4603      	mov	r3, r0
 80002e6:	460a      	mov	r2, r1
 80002e8:	71fb      	strb	r3, [r7, #7]
 80002ea:	4613      	mov	r3, r2
 80002ec:	71bb      	strb	r3, [r7, #6]
  uint8_t tem;
  tem = read_reg(addr);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff89 	bl	8000208 <read_reg>
 80002f6:	4603      	mov	r3, r0
 80002f8:	73fb      	strb	r3, [r7, #15]
  tem = tem && bit;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d004      	beq.n	800030a <get_bit+0x2c>
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <get_bit+0x2c>
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <get_bit+0x2e>
 800030a:	2300      	movs	r3, #0
 800030c:	73fb      	strb	r3, [r7, #15]
  return tem;
 800030e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <OV5642_set_JPEG_size>:
      break;
  }
}

void OV5642_set_JPEG_size(uint8_t size)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  switch (size)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b06      	cmp	r3, #6
 8000326:	d82d      	bhi.n	8000384 <OV5642_set_JPEG_size+0x6c>
 8000328:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <OV5642_set_JPEG_size+0x18>)
 800032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032e:	bf00      	nop
 8000330:	0800034d 	.word	0x0800034d
 8000334:	08000355 	.word	0x08000355
 8000338:	0800035d 	.word	0x0800035d
 800033c:	08000365 	.word	0x08000365
 8000340:	0800036d 	.word	0x0800036d
 8000344:	08000375 	.word	0x08000375
 8000348:	0800037d 	.word	0x0800037d
  {
    case O5642_320x240:
      WRSensorRegs16_8(ov5642_320x240);
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <OV5642_set_JPEG_size+0x7c>)
 800034e:	f000 f84b 	bl	80003e8 <WRSensorRegs16_8>
      break;
 8000352:	e01b      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_640x480:
      WRSensorRegs16_8(ov5642_640x480);
 8000354:	4810      	ldr	r0, [pc, #64]	; (8000398 <OV5642_set_JPEG_size+0x80>)
 8000356:	f000 f847 	bl	80003e8 <WRSensorRegs16_8>
      break;
 800035a:	e017      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_1024x768:
      WRSensorRegs16_8(ov5642_1024x768);
 800035c:	480f      	ldr	r0, [pc, #60]	; (800039c <OV5642_set_JPEG_size+0x84>)
 800035e:	f000 f843 	bl	80003e8 <WRSensorRegs16_8>
      break;
 8000362:	e013      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_1280x960:
      WRSensorRegs16_8(ov5642_1280x960);
 8000364:	480e      	ldr	r0, [pc, #56]	; (80003a0 <OV5642_set_JPEG_size+0x88>)
 8000366:	f000 f83f 	bl	80003e8 <WRSensorRegs16_8>
      break;
 800036a:	e00f      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_1600x1200:
      WRSensorRegs16_8(ov5642_1600x1200);
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <OV5642_set_JPEG_size+0x8c>)
 800036e:	f000 f83b 	bl	80003e8 <WRSensorRegs16_8>
      break;
 8000372:	e00b      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_2048x1536:
      WRSensorRegs16_8(ov5642_2048x1536);
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <OV5642_set_JPEG_size+0x90>)
 8000376:	f000 f837 	bl	80003e8 <WRSensorRegs16_8>
      break;
 800037a:	e007      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    case O5642_2592x1944:
      WRSensorRegs16_8(ov5642_2592x1944);
 800037c:	480b      	ldr	r0, [pc, #44]	; (80003ac <OV5642_set_JPEG_size+0x94>)
 800037e:	f000 f833 	bl	80003e8 <WRSensorRegs16_8>
      break;
 8000382:	e003      	b.n	800038c <OV5642_set_JPEG_size+0x74>
    default:
      WRSensorRegs16_8(ov5642_320x240);
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <OV5642_set_JPEG_size+0x7c>)
 8000386:	f000 f82f 	bl	80003e8 <WRSensorRegs16_8>
      break;
 800038a:	bf00      	nop
  }
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	08004fc0 	.word	0x08004fc0
 8000398:	0800502c 	.word	0x0800502c
 800039c:	08005168 	.word	0x08005168
 80003a0:	08005098 	.word	0x08005098
 80003a4:	08005100 	.word	0x08005100
 80003a8:	080051d0 	.word	0x080051d0
 80003ac:	080052b8 	.word	0x080052b8

080003b0 <wrSensorReg16_8>:

  return err;
}

uint8_t wrSensorReg16_8(uint16_t regID, uint8_t regDat)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af04      	add	r7, sp, #16
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	80fb      	strh	r3, [r7, #6]
 80003bc:	4613      	mov	r3, r2
 80003be:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2, OV5642_ADD_WRITE, regID, sizeof(regID), &regDat, sizeof(regDat), 100);
 80003c0:	88fa      	ldrh	r2, [r7, #6]
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	9302      	str	r3, [sp, #8]
 80003c6:	2301      	movs	r3, #1
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	1d7b      	adds	r3, r7, #5
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	2302      	movs	r3, #2
 80003d0:	2178      	movs	r1, #120	; 0x78
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <wrSensorReg16_8+0x34>)
 80003d4:	f001 fa0c 	bl	80017f0 <HAL_I2C_Mem_Write>
	return regDat;
 80003d8:	797b      	ldrb	r3, [r7, #5]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000f4 	.word	0x200000f4

080003e8 <WRSensorRegs16_8>:
//  }
//  return err;
//}

uint8_t WRSensorRegs16_8(const struct sensor_reg reglist[])
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	uint8_t err=0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	75fb      	strb	r3, [r7, #23]
	  uint16_t reg_addr;
	  uint8_t reg_val;
	  const struct sensor_reg *next = reglist;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	60fb      	str	r3, [r7, #12]

	  while ((reg_addr != 0xffff) || (reg_val != 0xff))
 80003f8:	e010      	b.n	800041c <WRSensorRegs16_8+0x34>
	  {
	    reg_addr =next->reg;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	82bb      	strh	r3, [r7, #20]
	    reg_val = next->val;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	74fb      	strb	r3, [r7, #19]
	    err = wrSensorReg16_8(reg_addr, reg_val);
 8000406:	7cfa      	ldrb	r2, [r7, #19]
 8000408:	8abb      	ldrh	r3, [r7, #20]
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffcf 	bl	80003b0 <wrSensorReg16_8>
 8000412:	4603      	mov	r3, r0
 8000414:	75fb      	strb	r3, [r7, #23]
	    next++;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3304      	adds	r3, #4
 800041a:	60fb      	str	r3, [r7, #12]
	  while ((reg_addr != 0xffff) || (reg_val != 0xff))
 800041c:	8abb      	ldrh	r3, [r7, #20]
 800041e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000422:	4293      	cmp	r3, r2
 8000424:	d1e9      	bne.n	80003fa <WRSensorRegs16_8+0x12>
 8000426:	7cfb      	ldrb	r3, [r7, #19]
 8000428:	2bff      	cmp	r3, #255	; 0xff
 800042a:	d1e6      	bne.n	80003fa <WRSensorRegs16_8+0x12>
	  }
	  return err;
 800042c:	7dfb      	ldrb	r3, [r7, #23]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <rdSensorReg16_8>:


uint8_t rdSensorReg16_8(uint16_t regID, uint8_t *regDat)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af04      	add	r7, sp, #16
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c2, OV5642_ADD_WRITE, regID, 2, 100);
 8000444:	88fb      	ldrh	r3, [r7, #6]
 8000446:	461a      	mov	r2, r3
 8000448:	2364      	movs	r3, #100	; 0x64
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2302      	movs	r3, #2
 800044e:	2178      	movs	r1, #120	; 0x78
 8000450:	480a      	ldr	r0, [pc, #40]	; (800047c <rdSensorReg16_8+0x44>)
 8000452:	f001 f8cf 	bl	80015f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Read(&hi2c2, OV5642_ADD_READ, regID, sizeof(regID), regDat, 1, 100);
 8000456:	88fa      	ldrh	r2, [r7, #6]
 8000458:	2364      	movs	r3, #100	; 0x64
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2302      	movs	r3, #2
 8000466:	2179      	movs	r1, #121	; 0x79
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <rdSensorReg16_8+0x44>)
 800046a:	f001 fabb 	bl	80019e4 <HAL_I2C_Mem_Read>
	return *regDat;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	781b      	ldrb	r3, [r3, #0]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000f4 	.word	0x200000f4

08000480 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	b29a      	uxth	r2, r3
 8000490:	2364      	movs	r3, #100	; 0x64
 8000492:	68b9      	ldr	r1, [r7, #8]
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <_write+0x24>)
 8000496:	f003 fb29 	bl	8003aec <HAL_UART_Transmit>
	return len;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000148 	.word	0x20000148

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b093      	sub	sp, #76	; 0x4c
 80004ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fc57 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f94f 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa1b 	bl	80008f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ba:	f000 f9ef 	bl	800089c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80004be:	f000 f989 	bl	80007d4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80004c2:	f000 f9b5 	bl	8000830 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2110      	movs	r1, #16
 80004ca:	4895      	ldr	r0, [pc, #596]	; (8000720 <main+0x278>)
 80004cc:	f000 ff36 	bl	800133c <HAL_GPIO_WritePin>
write_reg(0x07, 0x80);
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	2007      	movs	r0, #7
 80004d4:	f7ff fec2 	bl	800025c <write_reg>
HAL_Delay(100);
 80004d8:	2064      	movs	r0, #100	; 0x64
 80004da:	f000 fca3 	bl	8000e24 <HAL_Delay>
write_reg(0x07, 0x00);
 80004de:	2100      	movs	r1, #0
 80004e0:	2007      	movs	r0, #7
 80004e2:	f7ff febb 	bl	800025c <write_reg>
HAL_Delay(100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f000 fc9c 	bl	8000e24 <HAL_Delay>
  /* USER CODE END 2 */

uint8_t buf;
CS_LOW();
 80004ec:	f7ff fe6a 	bl	80001c4 <CS_LOW>
write_reg(ARDUCHIP_TEST1, 0x55);
 80004f0:	2155      	movs	r1, #85	; 0x55
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff feb2 	bl	800025c <write_reg>
buf= read_reg(ARDUCHIP_TEST1);
 80004f8:	2000      	movs	r0, #0
 80004fa:	f7ff fe85 	bl	8000208 <read_reg>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//uint8_t reg= 0x80 | ARDUCHIP_TEST1;
//HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
////HAL_SPI_Transmit(&hspi2, 0x00, 1, 100);
//HAL_SPI_Receive(&hspi2, &temp, 1, 100);
CS_HIGH();
 8000504:	f7ff fe52 	bl	80001ac <CS_HIGH>
if (buf != 0x55)
 8000508:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800050c:	2b55      	cmp	r3, #85	; 0x55
 800050e:	d00d      	beq.n	800052c <main+0x84>
{
	printf("ACK CMD SPI interface Error!\n");
 8000510:	4884      	ldr	r0, [pc, #528]	; (8000724 <main+0x27c>)
 8000512:	f003 fd37 	bl	8003f84 <puts>
	printf("%x\n", buf);
 8000516:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800051a:	4619      	mov	r1, r3
 800051c:	4882      	ldr	r0, [pc, #520]	; (8000728 <main+0x280>)
 800051e:	f003 fc97 	bl	8003e50 <iprintf>
	HAL_Delay(1000);
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f000 fc7d 	bl	8000e24 <HAL_Delay>
 800052a:	e002      	b.n	8000532 <main+0x8a>
}
else
{
	printf("ACK CMD SPI interface OK!\r\n");
 800052c:	487f      	ldr	r0, [pc, #508]	; (800072c <main+0x284>)
 800052e:	f003 fd29 	bl	8003f84 <puts>
}
wrSensorReg16_8(0xff, 0x01);
 8000532:	2101      	movs	r1, #1
 8000534:	20ff      	movs	r0, #255	; 0xff
 8000536:	f7ff ff3b 	bl	80003b0 <wrSensorReg16_8>
HAL_I2C_Master_Transmit(&hi2c2, OV5642_ADD_WRITE, OV5642_CHIPID_HIGH, 2, 100);
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2302      	movs	r3, #2
 8000540:	f243 020a 	movw	r2, #12298	; 0x300a
 8000544:	2178      	movs	r1, #120	; 0x78
 8000546:	487a      	ldr	r0, [pc, #488]	; (8000730 <main+0x288>)
 8000548:	f001 f854 	bl	80015f4 <HAL_I2C_Master_Transmit>
HAL_I2C_Mem_Read(&hi2c2, OV5642_ADD_READ, OV5642_CHIPID_HIGH, sizeof(OV5642_CHIPID_HIGH), &vid, 1, 100);
 800054c:	2364      	movs	r3, #100	; 0x64
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2301      	movs	r3, #1
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2304      	movs	r3, #4
 800055c:	f243 020a 	movw	r2, #12298	; 0x300a
 8000560:	2179      	movs	r1, #121	; 0x79
 8000562:	4873      	ldr	r0, [pc, #460]	; (8000730 <main+0x288>)
 8000564:	f001 fa3e 	bl	80019e4 <HAL_I2C_Mem_Read>
//rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid);
rdSensorReg16_8(OV5642_CHIPID_LOW, &pid);
 8000568:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800056c:	4619      	mov	r1, r3
 800056e:	f243 000b 	movw	r0, #12299	; 0x300b
 8000572:	f7ff ff61 	bl	8000438 <rdSensorReg16_8>
if ((vid != 0x56) || (pid != 0x42))
 8000576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800057a:	2b56      	cmp	r3, #86	; 0x56
 800057c:	d103      	bne.n	8000586 <main+0xde>
 800057e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000582:	2b42      	cmp	r3, #66	; 0x42
 8000584:	d00f      	beq.n	80005a6 <main+0xfe>
{
	printf("ACK CMD Can't find OV5642 module!\r\n");
 8000586:	486b      	ldr	r0, [pc, #428]	; (8000734 <main+0x28c>)
 8000588:	f003 fcfc 	bl	8003f84 <puts>
	printf("%x ",vid);
 800058c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000590:	4619      	mov	r1, r3
 8000592:	4869      	ldr	r0, [pc, #420]	; (8000738 <main+0x290>)
 8000594:	f003 fc5c 	bl	8003e50 <iprintf>
	printf("%x\n",pid);
 8000598:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800059c:	4619      	mov	r1, r3
 800059e:	4862      	ldr	r0, [pc, #392]	; (8000728 <main+0x280>)
 80005a0:	f003 fc56 	bl	8003e50 <iprintf>
 80005a4:	e002      	b.n	80005ac <main+0x104>
}
else
{
 printf("ACK CMD OV5642 detected.\r\n");
 80005a6:	4865      	ldr	r0, [pc, #404]	; (800073c <main+0x294>)
 80005a8:	f003 fcec 	bl	8003f84 <puts>

  /* USER CODE BEGIN 3 */
}

set_format(JPEG);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff fe15 	bl	80001dc <set_format>
ArduCAM_Init();
 80005b2:	f7ff fdcb 	bl	800014c <ArduCAM_Init>
write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2003      	movs	r0, #3
 80005ba:	f7ff fe4f 	bl	800025c <write_reg>
clear_fifo_flag();
 80005be:	f7ff fe86 	bl	80002ce <clear_fifo_flag>
write_reg(ARDUCHIP_FRAMES,0x00);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff fe49 	bl	800025c <write_reg>
//set_bit(ARDUCHIP_GPIO,GPIO_PWDN_MASK);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("End of setup\n");
 80005ca:	485d      	ldr	r0, [pc, #372]	; (8000740 <main+0x298>)
 80005cc:	f003 fcda 	bl	8003f84 <puts>
while(1)
	{
	 uint8_t temp = 0xff, temp_last = 0;
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
//	 clear_bit(ARDUCHIP_GPIO,GPIO_PWDN_MASK);

	 OV5642_set_JPEG_size(O5642_640x480);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe9b 	bl	8000318 <OV5642_set_JPEG_size>
	 printf("ACK CMD switch to OV5642_640x480\n");
 80005e2:	4858      	ldr	r0, [pc, #352]	; (8000744 <main+0x29c>)
 80005e4:	f003 fcce 	bl	8003f84 <puts>
	 HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f000 fc1b 	bl	8000e24 <HAL_Delay>
	 flush_fifo();
 80005ee:	f7ff fe66 	bl	80002be <flush_fifo>
	 clear_fifo_flag();
 80005f2:	f7ff fe6c 	bl	80002ce <clear_fifo_flag>
	  //start capture
	 write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 80005f6:	2102      	movs	r1, #2
 80005f8:	2004      	movs	r0, #4
 80005fa:	f7ff fe2f 	bl	800025c <write_reg>
	 if(get_bit(ARDUCHIP_TRIG, CAP_DONE_MASK))
 80005fe:	2108      	movs	r1, #8
 8000600:	2041      	movs	r0, #65	; 0x41
 8000602:	f7ff fe6c 	bl	80002de <get_bit>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d079      	beq.n	8000700 <main+0x258>
	  {
 800060c:	466b      	mov	r3, sp
 800060e:	461e      	mov	r6, r3
	    char buff[30]="ACK CMD CAM Capture Done.\n";
 8000610:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <main+0x2a0>)
 8000612:	1d3c      	adds	r4, r7, #4
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	c403      	stmia	r4!, {r0, r1}
 8000620:	8022      	strh	r2, [r4, #0]
 8000622:	3402      	adds	r4, #2
 8000624:	0c13      	lsrs	r3, r2, #16
 8000626:	7023      	strb	r3, [r4, #0]
 8000628:	f107 031f 	add.w	r3, r7, #31
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
 8000630:	709a      	strb	r2, [r3, #2]
	    temp=0;
 8000632:	2300      	movs	r3, #0
 8000634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	    uint32_t a=640*480*2,i;
 8000638:	f44f 2316 	mov.w	r3, #614400	; 0x96000
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    uint8_t buf[a];
 800063e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000640:	4623      	mov	r3, r4
 8000642:	3b01      	subs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
 8000646:	4620      	mov	r0, r4
 8000648:	f04f 0100 	mov.w	r1, #0
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	00cb      	lsls	r3, r1, #3
 8000656:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800065a:	00c2      	lsls	r2, r0, #3
 800065c:	4620      	mov	r0, r4
 800065e:	f04f 0100 	mov.w	r1, #0
 8000662:	f04f 0200 	mov.w	r2, #0
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	00cb      	lsls	r3, r1, #3
 800066c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000670:	00c2      	lsls	r2, r0, #3
 8000672:	1de3      	adds	r3, r4, #7
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	ebad 0d03 	sub.w	sp, sp, r3
 800067c:	ab04      	add	r3, sp, #16
 800067e:	3300      	adds	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	221e      	movs	r2, #30
 8000688:	4830      	ldr	r0, [pc, #192]	; (800074c <main+0x2a4>)
 800068a:	f003 fa2f 	bl	8003aec <HAL_UART_Transmit>
//	    printf("ACK IMG");

	    do
	    {
	    	temp_last = temp;
 800068e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000692:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		    temp= read_fifo();
 8000696:	f7ff fe05 	bl	80002a4 <read_fifo>
 800069a:	4603      	mov	r3, r0
 800069c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		    for(i=0;i<a;i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
 80006a4:	e008      	b.n	80006b8 <main+0x210>
		    {
		    	buf[i]=temp;
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006aa:	4413      	add	r3, r2
 80006ac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80006b0:	701a      	strb	r2, [r3, #0]
		    for(i=0;i<a;i++)
 80006b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b4:	3301      	adds	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
 80006b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3f2      	bcc.n	80006a6 <main+0x1fe>

		    }
		    HAL_UART_Transmit(&huart1, buf, sizeof(buf), 500);
 80006c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006c2:	b2a2      	uxth	r2, r4
 80006c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <main+0x2a4>)
 80006ca:	f003 fa0f 	bl	8003aec <HAL_UART_Transmit>
		    HAL_Delay(15);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 fba8 	bl	8000e24 <HAL_Delay>
	    }
	    while( (temp != 0xD9) | (temp_last != 0xFF) );
 80006d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d8:	2bd9      	cmp	r3, #217	; 0xd9
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80006e6:	2bff      	cmp	r3, #255	; 0xff
 80006e8:	bf14      	ite	ne
 80006ea:	2301      	movne	r3, #1
 80006ec:	2300      	moveq	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1ca      	bne.n	800068e <main+0x1e6>

	    //Clear the capture done flag
	    clear_fifo_flag();
 80006f8:	f7ff fde9 	bl	80002ce <clear_fifo_flag>
 80006fc:	46b5      	mov	sp, r6
 80006fe:	e006      	b.n	800070e <main+0x266>
	  }
	 else
	 {
		 printf("capture not done properly\n");
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <main+0x2a8>)
 8000702:	f003 fc3f 	bl	8003f84 <puts>
		 HAL_Delay(2000);
 8000706:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800070a:	f000 fb8b 	bl	8000e24 <HAL_Delay>
	 }
	 printf("\n");
 800070e:	200a      	movs	r0, #10
 8000710:	f003 fbb6 	bl	8003e80 <putchar>
	 HAL_Delay(20000);
 8000714:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000718:	f000 fb84 	bl	8000e24 <HAL_Delay>
	{
 800071c:	e758      	b.n	80005d0 <main+0x128>
 800071e:	bf00      	nop
 8000720:	40010800 	.word	0x40010800
 8000724:	08004ecc 	.word	0x08004ecc
 8000728:	08004eec 	.word	0x08004eec
 800072c:	08004ef0 	.word	0x08004ef0
 8000730:	200000f4 	.word	0x200000f4
 8000734:	08004f0c 	.word	0x08004f0c
 8000738:	08004f30 	.word	0x08004f30
 800073c:	08004f34 	.word	0x08004f34
 8000740:	08004f50 	.word	0x08004f50
 8000744:	08004f60 	.word	0x08004f60
 8000748:	08004fa0 	.word	0x08004fa0
 800074c:	20000148 	.word	0x20000148
 8000750:	08004f84 	.word	0x08004f84

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	; 0x40
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fb6c 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2310      	movs	r3, #16
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800078a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4618      	mov	r0, r3
 8000796:	f001 ffc3 	bl	8002720 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007a0:	f000 f8f8 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fa2f 	bl	8002c20 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007c8:	f000 f8e4 	bl	8000994 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3740      	adds	r7, #64	; 0x40
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C2_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C2_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C2_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C2_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C2_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C2_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C2_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C2_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C2_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C2_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C2_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C2_Init+0x50>)
 8000812:	f000 fdab 	bl	800136c <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f8ba 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000f4 	.word	0x200000f4
 8000828:	40005800 	.word	0x40005800
 800082c:	000186a0 	.word	0x000186a0

08000830 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_SPI2_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_SPI2_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI2_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI2_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI2_Init+0x64>)
 8000864:	2208      	movs	r2, #8
 8000866:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI2_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI2_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_SPI2_Init+0x64>)
 8000882:	f002 fb5b 	bl	8002f3c <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f882 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000009c 	.word	0x2000009c
 8000898:	40003800 	.word	0x40003800

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART1_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f003 f8ba 	bl	8003a4c <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f859 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000148 	.word	0x20000148
 80008ec:	40013800 	.word	0x40013800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_GPIO_Init+0x98>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <MX_GPIO_Init+0x98>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_GPIO_Init+0x98>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_GPIO_Init+0x98>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <MX_GPIO_Init+0x98>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_GPIO_Init+0x98>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_GPIO_Init+0x9c>)
 800093a:	f000 fcff 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_GPIO_Init+0xa0>)
 8000944:	f000 fcfa 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000948:	2310      	movs	r3, #16
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x9c>)
 8000960:	f000 fb68 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0xa0>)
 800097c:	f000 fb5a 	bl	8001034 <HAL_GPIO_Init>

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	40010c00 	.word	0x40010c00

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_MspInit+0x5c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x5c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_MspInit+0x60>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_MspInit+0x60>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_I2C_MspInit+0x74>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d124      	bne.n	8000a6e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <HAL_I2C_MspInit+0x7c>)
 8000a52:	f000 faef 	bl	8001034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <HAL_SPI_MspInit+0x8c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d131      	bne.n	8000b08 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	61d3      	str	r3, [r2, #28]
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_SPI_MspInit+0x90>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ad4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <HAL_SPI_MspInit+0x94>)
 8000aea:	f000 faa3 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_SPI_MspInit+0x94>)
 8000b04:	f000 fa96 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40003800 	.word	0x40003800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d131      	bne.n	8000ba0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b82:	f000 fa57 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b9c:	f000 fa4a 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f8f7 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e00a      	b.n	8000c2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c14:	f3af 8000 	nop.w
 8000c18:	4601      	mov	r1, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	60ba      	str	r2, [r7, #8]
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	dbf0      	blt.n	8000c14 <_read+0x12>
	}

return len;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	return -1;
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <_isatty>:

int _isatty(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 f88e 	bl	8003dec <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20005000 	.word	0x20005000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000090 	.word	0x20000090
 8000d04:	200001a8 	.word	0x200001a8

08000d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff fff8 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d30:	4c09      	ldr	r4, [pc, #36]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 f85b 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d42:	f7ff fbb1 	bl	80004a8 <main>
  bx lr
 8000d46:	4770      	bx	lr
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d50:	08005e2c 	.word	0x08005e2c
  ldr r2, =_sbss
 8000d54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d58:	200001a4 	.word	0x200001a4

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f92b 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe10 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f935 	bl	800101a <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f90b 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000004 	.word	0x20000004
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000190 	.word	0x20000190

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000190 	.word	0x20000190

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffe0 	bl	8000e10 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff90 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff49 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff5e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff90 	bl	8000f24 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5f 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb0 	bl	8000f88 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e169      	b.n	800131c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8158 	bne.w	8001316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a9a      	ldr	r2, [pc, #616]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d05e      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001070:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d875      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001076:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d058      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 800107c:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d86f      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001082:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d052      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d869      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800108e:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d04c      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d863      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800109a:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d046      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 80010a0:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d85d      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d82a      	bhi.n	8001100 <HAL_GPIO_Init+0xcc>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d859      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_GPIO_Init+0x80>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	08001109 	.word	0x08001109
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	0800115d 	.word	0x0800115d
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001125 	.word	0x08001125
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <HAL_GPIO_Init+0x2b4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001106:	e02c      	b.n	8001162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e029      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e024      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	3308      	adds	r3, #8
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e01f      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	330c      	adds	r3, #12
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e01a      	b.n	8001164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e013      	b.n	8001164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	611a      	str	r2, [r3, #16]
          break;
 800114e:	e009      	b.n	8001164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	615a      	str	r2, [r3, #20]
          break;
 800115a:	e003      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x130>
          break;
 8001162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <HAL_GPIO_Init+0x13a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d802      	bhi.n	8001180 <HAL_GPIO_Init+0x14c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x152>
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3b08      	subs	r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	210f      	movs	r1, #15
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	431a      	orrs	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b1 	beq.w	8001316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e0>
 8001210:	2303      	movs	r3, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001214:	2304      	movs	r3, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001218:	2302      	movs	r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001220:	2300      	movs	r3, #0
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4093      	lsls	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4918      	ldr	r1, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x2e2>
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_GPIO_Init+0x304>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001312:	4013      	ands	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae8e 	bne.w	8001048 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e12b      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb36 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d0:	f001 fd6e 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a81      	ldr	r2, [pc, #516]	; (80015e0 <HAL_I2C_Init+0x274>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d807      	bhi.n	80013f0 <HAL_I2C_Init+0x84>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_I2C_Init+0x278>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf94      	ite	ls
 80013e8:	2301      	movls	r3, #1
 80013ea:	2300      	movhi	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e006      	b.n	80013fe <HAL_I2C_Init+0x92>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a7d      	ldr	r2, [pc, #500]	; (80015e8 <HAL_I2C_Init+0x27c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf94      	ite	ls
 80013f8:	2301      	movls	r3, #1
 80013fa:	2300      	movhi	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e7      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <HAL_I2C_Init+0x280>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a6a      	ldr	r2, [pc, #424]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d802      	bhi.n	8001440 <HAL_I2C_Init+0xd4>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	e009      	b.n	8001454 <HAL_I2C_Init+0xe8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_I2C_Init+0x284>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	3301      	adds	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	495c      	ldr	r1, [pc, #368]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001470:	428b      	cmp	r3, r1
 8001472:	d819      	bhi.n	80014a8 <HAL_I2C_Init+0x13c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e59      	subs	r1, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001488:	400b      	ands	r3, r1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_I2C_Init+0x138>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e59      	subs	r1, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	e051      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e04f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_I2C_Init+0x168>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e012      	b.n	80014fa <HAL_I2C_Init+0x18e>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	0099      	lsls	r1, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x196>
 80014fe:	2301      	movs	r3, #1
 8001500:	e022      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <HAL_I2C_Init+0x1bc>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e58      	subs	r0, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6859      	ldr	r1, [r3, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	e00f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6911      	ldr	r1, [r2, #16]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	000186a0 	.word	0x000186a0
 80015e4:	001e847f 	.word	0x001e847f
 80015e8:	003d08ff 	.word	0x003d08ff
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	817b      	strh	r3, [r7, #10]
 8001604:	4613      	mov	r3, r2
 8001606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff fc02 	bl	8000e10 <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	f040 80e0 	bne.w	80017dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2319      	movs	r3, #25
 8001622:	2201      	movs	r2, #1
 8001624:	4970      	ldr	r1, [pc, #448]	; (80017e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fe44 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	e0d3      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_I2C_Master_Transmit+0x50>
 8001640:	2302      	movs	r3, #2
 8001642:	e0cc      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d007      	beq.n	800166a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2221      	movs	r2, #33	; 0x21
 800167e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2210      	movs	r2, #16
 8001686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	893a      	ldrh	r2, [r7, #8]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <HAL_I2C_Master_Transmit+0x1f8>)
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fbfe 	bl	8001eb4 <I2C_MasterRequestWrite>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e08d      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d8:	e066      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 ff02 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d11b      	bne.n	800177c <HAL_I2C_Master_Transmit+0x188>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d017      	beq.n	800177c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fef9 	bl	8002578 <I2C_WaitOnBTFFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b04      	cmp	r3, #4
 8001792:	d107      	bne.n	80017a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e01a      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d194      	bne.n	80016da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	817b      	strh	r3, [r7, #10]
 8001802:	460b      	mov	r3, r1
 8001804:	813b      	strh	r3, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800180a:	f7ff fb01 	bl	8000e10 <HAL_GetTick>
 800180e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b20      	cmp	r3, #32
 800181a:	f040 80d9 	bne.w	80019d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2319      	movs	r3, #25
 8001824:	2201      	movs	r2, #1
 8001826:	496d      	ldr	r1, [pc, #436]	; (80019dc <HAL_I2C_Mem_Write+0x1ec>)
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fd43 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
 8001836:	e0cc      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Mem_Write+0x56>
 8001842:	2302      	movs	r3, #2
 8001844:	e0c5      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d007      	beq.n	800186c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2221      	movs	r2, #33	; 0x21
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800189c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_I2C_Mem_Write+0x1f0>)
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ae:	88f8      	ldrh	r0, [r7, #6]
 80018b0:	893a      	ldrh	r2, [r7, #8]
 80018b2:	8979      	ldrh	r1, [r7, #10]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 fb7a 	bl	8001fb8 <I2C_RequestMemoryWrite>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d052      	beq.n	8001970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e081      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fe08 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d107      	bne.n	80018f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d11b      	bne.n	8001970 <HAL_I2C_Mem_Write+0x180>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1aa      	bne.n	80018ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 fdfb 	bl	8002578 <I2C_WaitOnBTFFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00d      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2b04      	cmp	r3, #4
 800198e:	d107      	bne.n	80019a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e016      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	00100002 	.word	0x00100002
 80019e0:	ffff0000 	.word	0xffff0000

080019e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	817b      	strh	r3, [r7, #10]
 80019f6:	460b      	mov	r3, r1
 80019f8:	813b      	strh	r3, [r7, #8]
 80019fa:	4613      	mov	r3, r2
 80019fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a02:	f7ff fa05 	bl	8000e10 <HAL_GetTick>
 8001a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	f040 8244 	bne.w	8001e9e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2319      	movs	r3, #25
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4982      	ldr	r1, [pc, #520]	; (8001c28 <HAL_I2C_Mem_Read+0x244>)
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fc47 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e237      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Mem_Read+0x5a>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e230      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d007      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2222      	movs	r2, #34	; 0x22
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a62      	ldr	r2, [pc, #392]	; (8001c2c <HAL_I2C_Mem_Read+0x248>)
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aa6:	88f8      	ldrh	r0, [r7, #6]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	8979      	ldrh	r1, [r7, #10]
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fb14 	bl	80020e4 <I2C_RequestMemoryRead>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1ec      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d113      	bne.n	8001af6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e1c0      	b.n	8001e78 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11e      	bne.n	8001b3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0e:	b672      	cpsid	i
}
 8001b10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b38:	b662      	cpsie	i
}
 8001b3a:	e035      	b.n	8001ba8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d11e      	bne.n	8001b82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b7e:	b662      	cpsie	i
}
 8001b80:	e012      	b.n	8001ba8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ba8:	e166      	b.n	8001e78 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	f200 811f 	bhi.w	8001df2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d123      	bne.n	8001c04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fd21 	bl	8002608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e167      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c02:	e139      	b.n	8001e78 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d152      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c12:	2200      	movs	r2, #0
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <HAL_I2C_Mem_Read+0x24c>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fb4c 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e13c      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
 8001c26:	bf00      	nop
 8001c28:	00100002 	.word	0x00100002
 8001c2c:	ffff0000 	.word	0xffff0000
 8001c30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c7a:	b662      	cpsie	i
}
 8001c7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb0:	e0e2      	b.n	8001e78 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	2200      	movs	r2, #0
 8001cba:	497b      	ldr	r1, [pc, #492]	; (8001ea8 <HAL_I2C_Mem_Read+0x4c4>)
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 faf9 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e9      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_I2C_Mem_Read+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_I2C_Mem_Read+0x4cc>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0a1a      	lsrs	r2, r3, #8
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00da      	lsls	r2, r3, #3
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d118      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0220 	orr.w	r2, r3, #32
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d5a:	b662      	cpsie	i
}
 8001d5c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e09a      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d1d9      	bne.n	8001d2c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dba:	b662      	cpsie	i
}
 8001dbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001df0:	e042      	b.n	8001e78 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fc06 	bl	8002608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e04c      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d118      	bne.n	8001e78 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f ae94 	bne.w	8001baa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	00010004 	.word	0x00010004
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	14f8b589 	.word	0x14f8b589

08001eb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d006      	beq.n	8001ede <I2C_MasterRequestWrite+0x2a>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d003      	beq.n	8001ede <I2C_MasterRequestWrite+0x2a>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001edc:	d108      	bne.n	8001ef0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00b      	b.n	8001f08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d107      	bne.n	8001f08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f9cd 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d103      	bne.n	8001f38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e035      	b.n	8001fa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f44:	d108      	bne.n	8001f58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f46:	897b      	ldrh	r3, [r7, #10]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	e01b      	b.n	8001f90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f58:	897b      	ldrh	r3, [r7, #10]
 8001f5a:	11db      	asrs	r3, r3, #7
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f003 0306 	and.w	r3, r3, #6
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f063 030f 	orn	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <I2C_MasterRequestWrite+0xfc>)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fa16 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e010      	b.n	8001fa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f86:	897b      	ldrh	r3, [r7, #10]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <I2C_MasterRequestWrite+0x100>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa06 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	00010008 	.word	0x00010008
 8001fb4:	00010002 	.word	0x00010002

08001fb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	817b      	strh	r3, [r7, #10]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	813b      	strh	r3, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f960 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d103      	bne.n	8002012 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e05f      	b.n	80020d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002024:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	492d      	ldr	r1, [pc, #180]	; (80020e0 <I2C_RequestMemoryWrite+0x128>)
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f9bb 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e04c      	b.n	80020d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fa46 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b04      	cmp	r3, #4
 8002068:	d107      	bne.n	800207a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002078:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e02b      	b.n	80020d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	e021      	b.n	80020d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002090:	893b      	ldrh	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a0:	6a39      	ldr	r1, [r7, #32]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa20 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00d      	beq.n	80020ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d107      	bne.n	80020c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e005      	b.n	80020d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ca:	893b      	ldrh	r3, [r7, #8]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	00010002 	.word	0x00010002

080020e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	817b      	strh	r3, [r7, #10]
 80020f6:	460b      	mov	r3, r1
 80020f8:	813b      	strh	r3, [r7, #8]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800210c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800211c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2200      	movs	r2, #0
 8002126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8c2 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002144:	d103      	bne.n	800214e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0aa      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	6a3a      	ldr	r2, [r7, #32]
 8002166:	4952      	ldr	r1, [pc, #328]	; (80022b0 <I2C_RequestMemoryRead+0x1cc>)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f91d 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e097      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f9a8 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00d      	beq.n	80021ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d107      	bne.n	80021b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e076      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e021      	b.n	8002210 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021cc:	893b      	ldrh	r3, [r7, #8]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021dc:	6a39      	ldr	r1, [r7, #32]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f982 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d107      	bne.n	8002202 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e050      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	6a39      	ldr	r1, [r7, #32]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f967 	bl	80024e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e035      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2200      	movs	r2, #0
 8002254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f82b 	bl	80022b4 <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d103      	bne.n	800227c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e013      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002280:	897b      	ldrh	r3, [r7, #10]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	4906      	ldr	r1, [pc, #24]	; (80022b0 <I2C_RequestMemoryRead+0x1cc>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f886 	bl	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	00010002 	.word	0x00010002

080022b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c4:	e048      	b.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d044      	beq.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7fe fd9f 	bl	8000e10 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d139      	bne.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <I2C_WaitOnFlagUntilTimeout+0x56>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	e00c      	b.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x70>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	43da      	mvns	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4013      	ands	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	429a      	cmp	r2, r3
 8002328:	d116      	bne.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e023      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10d      	bne.n	800237e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	43da      	mvns	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4013      	ands	r3, r2
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	e00c      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	43da      	mvns	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4013      	ands	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	429a      	cmp	r2, r3
 800239c:	d093      	beq.n	80022c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b6:	e071      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d123      	bne.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e067      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002416:	d041      	beq.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002418:	f7fe fcfa 	bl	8000e10 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d302      	bcc.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d136      	bne.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e00b      	b.n	800246a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	43da      	mvns	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d016      	beq.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e021      	b.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10c      	bne.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	43da      	mvns	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e00b      	b.n	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af6d 	bne.w	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8e3 	bl	80026c2 <I2C_IsAcknowledgeFailed>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e034      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d028      	beq.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250e:	f7fe fc7f 	bl	8000e10 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	d302      	bcc.n	8002524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11d      	bne.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d016      	beq.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e007      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b80      	cmp	r3, #128	; 0x80
 800256c:	d1c3      	bne.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f89b 	bl	80026c2 <I2C_IsAcknowledgeFailed>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e034      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d028      	beq.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fc37 	bl	8000e10 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d016      	beq.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d1c3      	bne.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002614:	e049      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b10      	cmp	r3, #16
 8002622:	d119      	bne.n	8002658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e030      	b.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002658:	f7fe fbda 	bl	8000e10 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d302      	bcc.n	800266e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11d      	bne.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d016      	beq.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f043 0220 	orr.w	r2, r3, #32
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e007      	b.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d1ae      	bne.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d8:	d11b      	bne.n	8002712 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
	...

08002720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e26c      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8087 	beq.w	800284e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002740:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b04      	cmp	r3, #4
 800274a:	d00c      	beq.n	8002766 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800274c:	4b8f      	ldr	r3, [pc, #572]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d112      	bne.n	800277e <HAL_RCC_OscConfig+0x5e>
 8002758:	4b8c      	ldr	r3, [pc, #560]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d10b      	bne.n	800277e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002766:	4b89      	ldr	r3, [pc, #548]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d06c      	beq.n	800284c <HAL_RCC_OscConfig+0x12c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d168      	bne.n	800284c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e246      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x76>
 8002788:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a7f      	ldr	r2, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e02e      	b.n	80027f4 <HAL_RCC_OscConfig+0xd4>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b78      	ldr	r3, [pc, #480]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a77      	ldr	r2, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e01d      	b.n	80027f4 <HAL_RCC_OscConfig+0xd4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0xbc>
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a71      	ldr	r2, [pc, #452]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6e      	ldr	r2, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0xd4>
 80027dc:	4b6b      	ldr	r3, [pc, #428]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a67      	ldr	r2, [pc, #412]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80027ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fb08 	bl	8000e10 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fb04 	bl	8000e10 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1fa      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0xe4>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe faf4 	bl	8000e10 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe faf0 	bl	8000e10 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1e6      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x10c>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d063      	beq.n	8002922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285a:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d11c      	bne.n	80028ac <HAL_RCC_OscConfig+0x18c>
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	4b43      	ldr	r3, [pc, #268]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x176>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1ba      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4939      	ldr	r1, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	e03a      	b.n	8002922 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCC_OscConfig+0x270>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe faa9 	bl	8000e10 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe faa5 	bl	8000e10 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e19b      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4927      	ldr	r1, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_RCC_OscConfig+0x270>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fa88 	bl	8000e10 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fa84 	bl	8000e10 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e17a      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03a      	beq.n	80029a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d019      	beq.n	800296a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x274>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fe fa68 	bl	8000e10 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe fa64 	bl	8000e10 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e15a      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x26c>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002962:	2001      	movs	r0, #1
 8002964:	f000 facc 	bl	8002f00 <RCC_Delay>
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_RCC_OscConfig+0x274>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fa4e 	bl	8000e10 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002976:	e00f      	b.n	8002998 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002978:	f7fe fa4a 	bl	8000e10 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d908      	bls.n	8002998 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e140      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	42420000 	.word	0x42420000
 8002994:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	4b9e      	ldr	r3, [pc, #632]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e9      	bne.n	8002978 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a6 	beq.w	8002afe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4b97      	ldr	r3, [pc, #604]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b94      	ldr	r3, [pc, #592]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4a93      	ldr	r2, [pc, #588]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	61d3      	str	r3, [r2, #28]
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b8e      	ldr	r3, [pc, #568]	; (8002c18 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d118      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fa0b 	bl	8000e10 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe fa07 	bl	8000e10 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b64      	cmp	r3, #100	; 0x64
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0fd      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x312>
 8002a24:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	e02d      	b.n	8002a8e <HAL_RCC_OscConfig+0x36e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x334>
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a72      	ldr	r2, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6213      	str	r3, [r2, #32]
 8002a52:	e01c      	b.n	8002a8e <HAL_RCC_OscConfig+0x36e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x356>
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6213      	str	r3, [r2, #32]
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6213      	str	r3, [r2, #32]
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x36e>
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6213      	str	r3, [r2, #32]
 8002a82:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d015      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe f9bb 	bl	8000e10 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f9b7 	bl	8000e10 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0ab      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ee      	beq.n	8002a9e <HAL_RCC_OscConfig+0x37e>
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f9a5 	bl	8000e10 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f9a1 	bl	8000e10 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e095      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ee      	bne.n	8002aca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8081 	beq.w	8002c0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d061      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d146      	bne.n	8002baa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_OscConfig+0x4fc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f975 	bl	8000e10 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe f971 	bl	8000e10 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e067      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	492d      	ldr	r1, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a19      	ldr	r1, [r3, #32]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	430b      	orrs	r3, r1
 8002b76:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x4fc>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe f945 	bl	8000e10 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe f941 	bl	8000e10 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e037      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x46a>
 8002ba8:	e02f      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_RCC_OscConfig+0x4fc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f92e 	bl	8000e10 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe f92a 	bl	8000e10 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x498>
 8002bd6:	e018      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e013      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	42420060 	.word	0x42420060

08002c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0d0      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b67      	ldr	r3, [pc, #412]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4965      	ldr	r1, [pc, #404]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b8      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c94:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	494d      	ldr	r1, [pc, #308]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d040      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07f      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e073      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4936      	ldr	r1, [pc, #216]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fe f87e 	bl	8000e10 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fe f87a 	bl	8000e10 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e053      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d210      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4922      	ldr	r1, [pc, #136]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e032      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4916      	ldr	r1, [pc, #88]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dae:	f000 f821 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	490a      	ldr	r1, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	5ccb      	ldrb	r3, [r1, r3]
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1cc>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd ffdc 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08005d60 	.word	0x08005d60
 8002dec:	20000004 	.word	0x20000004
 8002df0:	20000008 	.word	0x20000008

08002df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x30>
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x36>
 8002e22:	e027      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e26:	613b      	str	r3, [r7, #16]
      break;
 8002e28:	e027      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0c9b      	lsrs	r3, r3, #18
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0c5b      	lsrs	r3, r3, #17
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e56:	fb02 f203 	mul.w	r2, r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e004      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	613b      	str	r3, [r7, #16]
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	613b      	str	r3, [r7, #16]
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	693b      	ldr	r3, [r7, #16]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	007a1200 	.word	0x007a1200
 8002e90:	08005d78 	.word	0x08005d78
 8002e94:	08005d88 	.word	0x08005d88
 8002e98:	003d0900 	.word	0x003d0900

08002e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	; (8002eac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff2 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08005d70 	.word	0x08005d70

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0adb      	lsrs	r3, r3, #11
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08005d70 	.word	0x08005d70

08002f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <RCC_Delay+0x34>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <RCC_Delay+0x38>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f1c:	bf00      	nop
  }
  while (Delay --);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e5a      	subs	r2, r3, #1
 8002f22:	60fa      	str	r2, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f9      	bne.n	8002f1c <RCC_Delay+0x1c>
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	20000004 	.word	0x20000004
 8002f38:	10624dd3 	.word	0x10624dd3

08002f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e076      	b.n	800303c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5e:	d009      	beq.n	8002f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
 8002f66:	e005      	b.n	8002f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fd78 	bl	8000a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	ea42 0103 	orr.w	r1, r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	0c1a      	lsrs	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f002 0204 	and.w	r2, r2, #4
 800301a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_SPI_Transmit+0x22>
 8003062:	2302      	movs	r3, #2
 8003064:	e12d      	b.n	80032c2 <HAL_SPI_Transmit+0x27e>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306e:	f7fd fecf 	bl	8000e10 <HAL_GetTick>
 8003072:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003088:	e116      	b.n	80032b8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Transmit+0x52>
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800309a:	e10d      	b.n	80032b8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2203      	movs	r2, #3
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d10f      	bne.n	8003104 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d007      	beq.n	8003122 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312a:	d14f      	bne.n	80031cc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0xf6>
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d142      	bne.n	80031c0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	1c9a      	adds	r2, r3, #2
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800315e:	e02f      	b.n	80031c0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d112      	bne.n	8003194 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	86da      	strh	r2, [r3, #54]	; 0x36
 8003192:	e015      	b.n	80031c0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003194:	f7fd fe3c 	bl	8000e10 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d803      	bhi.n	80031ac <HAL_SPI_Transmit+0x168>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x16e>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031be:	e07b      	b.n	80032b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1ca      	bne.n	8003160 <HAL_SPI_Transmit+0x11c>
 80031ca:	e050      	b.n	800326e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_SPI_Transmit+0x196>
 80031d4:	8afb      	ldrh	r3, [r7, #22]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d144      	bne.n	8003264 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003200:	e030      	b.n	8003264 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d113      	bne.n	8003238 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
 8003236:	e015      	b.n	8003264 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003238:	f7fd fdea 	bl	8000e10 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d803      	bhi.n	8003250 <HAL_SPI_Transmit+0x20c>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d102      	bne.n	8003256 <HAL_SPI_Transmit+0x212>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003262:	e029      	b.n	80032b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1c9      	bne.n	8003202 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fbcc 	bl	8003a10 <SPI_EndRxTxTransaction>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e003      	b.n	80032b8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b088      	sub	sp, #32
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d002      	beq.n	80032f0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
 80032ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032ee:	e0fb      	b.n	80034e8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f8:	d112      	bne.n	8003320 <HAL_SPI_Receive+0x56>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10e      	bne.n	8003320 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2204      	movs	r2, #4
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8ef 	bl	80034fa <HAL_SPI_TransmitReceive>
 800331c:	4603      	mov	r3, r0
 800331e:	e0e8      	b.n	80034f2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_SPI_Receive+0x64>
 800332a:	2302      	movs	r3, #2
 800332c:	e0e1      	b.n	80034f2 <HAL_SPI_Receive+0x228>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003336:	f7fd fd6b 	bl	8000e10 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Receive+0x7e>
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800334c:	e0cc      	b.n	80034e8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2204      	movs	r2, #4
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d10f      	bne.n	80033b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d007      	beq.n	80033d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d16a      	bne.n	80034b2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033dc:	e032      	b.n	8003444 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d115      	bne.n	8003418 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f103 020c 	add.w	r2, r3, #12
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003416:	e015      	b.n	8003444 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003418:	f7fd fcfa 	bl	8000e10 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d803      	bhi.n	8003430 <HAL_SPI_Receive+0x166>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Receive+0x16c>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003442:	e051      	b.n	80034e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1c7      	bne.n	80033de <HAL_SPI_Receive+0x114>
 800344e:	e035      	b.n	80034bc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d113      	bne.n	8003486 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	b292      	uxth	r2, r2
 800346a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003484:	e015      	b.n	80034b2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003486:	f7fd fcc3 	bl	8000e10 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d803      	bhi.n	800349e <HAL_SPI_Receive+0x1d4>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d102      	bne.n	80034a4 <HAL_SPI_Receive+0x1da>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034b0:	e01a      	b.n	80034e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1c9      	bne.n	8003450 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	6839      	ldr	r1, [r7, #0]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fa53 	bl	800396c <SPI_EndRxTransaction>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
 80034de:	e003      	b.n	80034e8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b08c      	sub	sp, #48	; 0x30
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003508:	2301      	movs	r3, #1
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x26>
 800351c:	2302      	movs	r3, #2
 800351e:	e198      	b.n	8003852 <HAL_SPI_TransmitReceive+0x358>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003528:	f7fd fc72 	bl	8000e10 <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003546:	2b01      	cmp	r3, #1
 8003548:	d00f      	beq.n	800356a <HAL_SPI_TransmitReceive+0x70>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003550:	d107      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x68>
 800355a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800355e:	2b04      	cmp	r3, #4
 8003560:	d003      	beq.n	800356a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003568:	e16d      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_SPI_TransmitReceive+0x82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_TransmitReceive+0x82>
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003582:	e160      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b04      	cmp	r3, #4
 800358e:	d003      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2205      	movs	r2, #5
 8003594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	887a      	ldrh	r2, [r7, #2]
 80035ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	887a      	ldrh	r2, [r7, #2]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d007      	beq.n	80035ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f4:	d17c      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x10a>
 80035fe:	8b7b      	ldrh	r3, [r7, #26]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d16a      	bne.n	80036da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003628:	e057      	b.n	80036da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d11b      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x176>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x176>
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d113      	bne.n	8003670 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d119      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x1b8>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d014      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	b292      	uxth	r2, r2
 8003694:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036b2:	f7fd fbad 	bl	8000e10 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036be:	429a      	cmp	r2, r3
 80036c0:	d80b      	bhi.n	80036da <HAL_SPI_TransmitReceive+0x1e0>
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d007      	beq.n	80036da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036d8:	e0b5      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1a2      	bne.n	800362a <HAL_SPI_TransmitReceive+0x130>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d19d      	bne.n	800362a <HAL_SPI_TransmitReceive+0x130>
 80036ee:	e080      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x204>
 80036f8:	8b7b      	ldrh	r3, [r7, #26]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d16f      	bne.n	80037de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003724:	e05b      	b.n	80037de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d11c      	bne.n	800376e <HAL_SPI_TransmitReceive+0x274>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_SPI_TransmitReceive+0x274>
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d114      	bne.n	800376e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d119      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x2b6>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d014      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ac:	2301      	movs	r3, #1
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037b0:	f7fd fb2e 	bl	8000e10 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037bc:	429a      	cmp	r2, r3
 80037be:	d803      	bhi.n	80037c8 <HAL_SPI_TransmitReceive+0x2ce>
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x2d4>
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80037dc:	e033      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d19e      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x22c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d199      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f90a 	bl	8003a10 <SPI_EndRxTxTransaction>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800380e:	e01a      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383c:	e003      	b.n	8003846 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800384e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003852:	4618      	mov	r0, r3
 8003854:	3730      	adds	r7, #48	; 0x30
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800386c:	f7fd fad0 	bl	8000e10 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4413      	add	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800387c:	f7fd fac8 	bl	8000e10 <HAL_GetTick>
 8003880:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	015b      	lsls	r3, r3, #5
 8003888:	0d1b      	lsrs	r3, r3, #20
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003892:	e054      	b.n	800393e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d050      	beq.n	800393e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389c:	f7fd fab8 	bl	8000e10 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d902      	bls.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d13d      	bne.n	800392e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ca:	d111      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d4:	d004      	beq.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d107      	bne.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f8:	d10f      	bne.n	800391a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003918:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e017      	b.n	800395e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3b01      	subs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d19b      	bne.n	8003894 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000004 	.word	0x20000004

0800396c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003980:	d111      	bne.n	80039a6 <SPI_EndRxTransaction+0x3a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398a:	d004      	beq.n	8003996 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d107      	bne.n	80039a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d117      	bne.n	80039e0 <SPI_EndRxTransaction+0x74>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b8:	d112      	bne.n	80039e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2101      	movs	r1, #1
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ff49 	bl	800385c <SPI_WaitFlagStateUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01a      	beq.n	8003a06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e013      	b.n	8003a08 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff ff36 	bl	800385c <SPI_WaitFlagStateUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e000      	b.n	8003a08 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff ff18 	bl	800385c <SPI_WaitFlagStateUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e000      	b.n	8003a44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e042      	b.n	8003ae4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f852 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f91d 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d16d      	bne.n	8003be8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Transmit+0x2c>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e066      	b.n	8003bea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	; 0x21
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2a:	f7fd f971 	bl	8000e10 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d108      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e003      	b.n	8003b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b60:	e02a      	b.n	8003bb8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f840 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e036      	b.n	8003bea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3302      	adds	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e007      	b.n	8003baa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1cf      	bne.n	8003b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f810 	bl	8003bf2 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e006      	b.n	8003bea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b090      	sub	sp, #64	; 0x40
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	e050      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d04c      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c12:	f7fd f8fd 	bl	8000e10 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d241      	bcs.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	637a      	str	r2, [r7, #52]	; 0x34
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	613b      	str	r3, [r7, #16]
   return(result);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c76:	623a      	str	r2, [r7, #32]
 8003c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e5      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e00f      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d09f      	beq.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3740      	adds	r7, #64	; 0x40
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d0a:	f023 030c 	bic.w	r3, r3, #12
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <UART_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d103      	bne.n	8003d40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7ff f8ce 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7ff f8b6 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003d44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <UART_SetConfig+0x118>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	0119      	lsls	r1, r3, #4
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <UART_SetConfig+0x118>)
 8003d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2064      	movs	r0, #100	; 0x64
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <UART_SetConfig+0x118>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	4419      	add	r1, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009a      	lsls	r2, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <UART_SetConfig+0x118>)
 8003db6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2064      	movs	r0, #100	; 0x64
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <UART_SetConfig+0x118>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	440a      	add	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40013800 	.word	0x40013800
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000010 	.word	0x20000010

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	4d0c      	ldr	r5, [pc, #48]	; (8003e30 <__libc_init_array+0x38>)
 8003dfe:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	f001 f854 	bl	8004eb4 <_init>
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	4d0a      	ldr	r5, [pc, #40]	; (8003e38 <__libc_init_array+0x40>)
 8003e10:	4c0a      	ldr	r4, [pc, #40]	; (8003e3c <__libc_init_array+0x44>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08005e24 	.word	0x08005e24
 8003e34:	08005e24 	.word	0x08005e24
 8003e38:	08005e24 	.word	0x08005e24
 8003e3c:	08005e28 	.word	0x08005e28

08003e40 <memset>:
 8003e40:	4603      	mov	r3, r0
 8003e42:	4402      	add	r2, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <iprintf>:
 8003e50:	b40f      	push	{r0, r1, r2, r3}
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <iprintf+0x2c>)
 8003e54:	b513      	push	{r0, r1, r4, lr}
 8003e56:	681c      	ldr	r4, [r3, #0]
 8003e58:	b124      	cbz	r4, 8003e64 <iprintf+0x14>
 8003e5a:	69a3      	ldr	r3, [r4, #24]
 8003e5c:	b913      	cbnz	r3, 8003e64 <iprintf+0x14>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 fa72 	bl	8004348 <__sinit>
 8003e64:	ab05      	add	r3, sp, #20
 8003e66:	4620      	mov	r0, r4
 8003e68:	9a04      	ldr	r2, [sp, #16]
 8003e6a:	68a1      	ldr	r1, [r4, #8]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	f000 fc3d 	bl	80046ec <_vfiprintf_r>
 8003e72:	b002      	add	sp, #8
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e78:	b004      	add	sp, #16
 8003e7a:	4770      	bx	lr
 8003e7c:	20000010 	.word	0x20000010

08003e80 <putchar>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <putchar+0x24>)
 8003e84:	4605      	mov	r5, r0
 8003e86:	681c      	ldr	r4, [r3, #0]
 8003e88:	b124      	cbz	r4, 8003e94 <putchar+0x14>
 8003e8a:	69a3      	ldr	r3, [r4, #24]
 8003e8c:	b913      	cbnz	r3, 8003e94 <putchar+0x14>
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 fa5a 	bl	8004348 <__sinit>
 8003e94:	4629      	mov	r1, r5
 8003e96:	4620      	mov	r0, r4
 8003e98:	68a2      	ldr	r2, [r4, #8]
 8003e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e9e:	f000 beeb 	b.w	8004c78 <_putc_r>
 8003ea2:	bf00      	nop
 8003ea4:	20000010 	.word	0x20000010

08003ea8 <_puts_r>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	460e      	mov	r6, r1
 8003eac:	4605      	mov	r5, r0
 8003eae:	b118      	cbz	r0, 8003eb8 <_puts_r+0x10>
 8003eb0:	6983      	ldr	r3, [r0, #24]
 8003eb2:	b90b      	cbnz	r3, 8003eb8 <_puts_r+0x10>
 8003eb4:	f000 fa48 	bl	8004348 <__sinit>
 8003eb8:	69ab      	ldr	r3, [r5, #24]
 8003eba:	68ac      	ldr	r4, [r5, #8]
 8003ebc:	b913      	cbnz	r3, 8003ec4 <_puts_r+0x1c>
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fa42 	bl	8004348 <__sinit>
 8003ec4:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <_puts_r+0xd0>)
 8003ec6:	429c      	cmp	r4, r3
 8003ec8:	d120      	bne.n	8003f0c <_puts_r+0x64>
 8003eca:	686c      	ldr	r4, [r5, #4]
 8003ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ece:	07db      	lsls	r3, r3, #31
 8003ed0:	d405      	bmi.n	8003ede <_puts_r+0x36>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	0598      	lsls	r0, r3, #22
 8003ed6:	d402      	bmi.n	8003ede <_puts_r+0x36>
 8003ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eda:	f000 fad3 	bl	8004484 <__retarget_lock_acquire_recursive>
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d51d      	bpl.n	8003f20 <_puts_r+0x78>
 8003ee4:	6923      	ldr	r3, [r4, #16]
 8003ee6:	b1db      	cbz	r3, 8003f20 <_puts_r+0x78>
 8003ee8:	3e01      	subs	r6, #1
 8003eea:	68a3      	ldr	r3, [r4, #8]
 8003eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60a3      	str	r3, [r4, #8]
 8003ef4:	bb39      	cbnz	r1, 8003f46 <_puts_r+0x9e>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da38      	bge.n	8003f6c <_puts_r+0xc4>
 8003efa:	4622      	mov	r2, r4
 8003efc:	210a      	movs	r1, #10
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 f848 	bl	8003f94 <__swbuf_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d011      	beq.n	8003f2c <_puts_r+0x84>
 8003f08:	250a      	movs	r5, #10
 8003f0a:	e011      	b.n	8003f30 <_puts_r+0x88>
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <_puts_r+0xd4>)
 8003f0e:	429c      	cmp	r4, r3
 8003f10:	d101      	bne.n	8003f16 <_puts_r+0x6e>
 8003f12:	68ac      	ldr	r4, [r5, #8]
 8003f14:	e7da      	b.n	8003ecc <_puts_r+0x24>
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <_puts_r+0xd8>)
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	bf08      	it	eq
 8003f1c:	68ec      	ldreq	r4, [r5, #12]
 8003f1e:	e7d5      	b.n	8003ecc <_puts_r+0x24>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f888 	bl	8004038 <__swsetup_r>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d0dd      	beq.n	8003ee8 <_puts_r+0x40>
 8003f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f32:	07da      	lsls	r2, r3, #31
 8003f34:	d405      	bmi.n	8003f42 <_puts_r+0x9a>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	059b      	lsls	r3, r3, #22
 8003f3a:	d402      	bmi.n	8003f42 <_puts_r+0x9a>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f3e:	f000 faa2 	bl	8004486 <__retarget_lock_release_recursive>
 8003f42:	4628      	mov	r0, r5
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da04      	bge.n	8003f54 <_puts_r+0xac>
 8003f4a:	69a2      	ldr	r2, [r4, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	dc06      	bgt.n	8003f5e <_puts_r+0xb6>
 8003f50:	290a      	cmp	r1, #10
 8003f52:	d004      	beq.n	8003f5e <_puts_r+0xb6>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	7019      	strb	r1, [r3, #0]
 8003f5c:	e7c5      	b.n	8003eea <_puts_r+0x42>
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f817 	bl	8003f94 <__swbuf_r>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d1bf      	bne.n	8003eea <_puts_r+0x42>
 8003f6a:	e7df      	b.n	8003f2c <_puts_r+0x84>
 8003f6c:	250a      	movs	r5, #10
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	6022      	str	r2, [r4, #0]
 8003f74:	701d      	strb	r5, [r3, #0]
 8003f76:	e7db      	b.n	8003f30 <_puts_r+0x88>
 8003f78:	08005db0 	.word	0x08005db0
 8003f7c:	08005dd0 	.word	0x08005dd0
 8003f80:	08005d90 	.word	0x08005d90

08003f84 <puts>:
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <puts+0xc>)
 8003f86:	4601      	mov	r1, r0
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f7ff bf8d 	b.w	8003ea8 <_puts_r>
 8003f8e:	bf00      	nop
 8003f90:	20000010 	.word	0x20000010

08003f94 <__swbuf_r>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	460e      	mov	r6, r1
 8003f98:	4614      	mov	r4, r2
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	b118      	cbz	r0, 8003fa6 <__swbuf_r+0x12>
 8003f9e:	6983      	ldr	r3, [r0, #24]
 8003fa0:	b90b      	cbnz	r3, 8003fa6 <__swbuf_r+0x12>
 8003fa2:	f000 f9d1 	bl	8004348 <__sinit>
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <__swbuf_r+0x98>)
 8003fa8:	429c      	cmp	r4, r3
 8003faa:	d12b      	bne.n	8004004 <__swbuf_r+0x70>
 8003fac:	686c      	ldr	r4, [r5, #4]
 8003fae:	69a3      	ldr	r3, [r4, #24]
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	071a      	lsls	r2, r3, #28
 8003fb6:	d52f      	bpl.n	8004018 <__swbuf_r+0x84>
 8003fb8:	6923      	ldr	r3, [r4, #16]
 8003fba:	b36b      	cbz	r3, 8004018 <__swbuf_r+0x84>
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	b2f6      	uxtb	r6, r6
 8003fc2:	1ac0      	subs	r0, r0, r3
 8003fc4:	6963      	ldr	r3, [r4, #20]
 8003fc6:	4637      	mov	r7, r6
 8003fc8:	4283      	cmp	r3, r0
 8003fca:	dc04      	bgt.n	8003fd6 <__swbuf_r+0x42>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f000 f926 	bl	8004220 <_fflush_r>
 8003fd4:	bb30      	cbnz	r0, 8004024 <__swbuf_r+0x90>
 8003fd6:	68a3      	ldr	r3, [r4, #8]
 8003fd8:	3001      	adds	r0, #1
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	6022      	str	r2, [r4, #0]
 8003fe4:	701e      	strb	r6, [r3, #0]
 8003fe6:	6963      	ldr	r3, [r4, #20]
 8003fe8:	4283      	cmp	r3, r0
 8003fea:	d004      	beq.n	8003ff6 <__swbuf_r+0x62>
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	07db      	lsls	r3, r3, #31
 8003ff0:	d506      	bpl.n	8004000 <__swbuf_r+0x6c>
 8003ff2:	2e0a      	cmp	r6, #10
 8003ff4:	d104      	bne.n	8004000 <__swbuf_r+0x6c>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f911 	bl	8004220 <_fflush_r>
 8003ffe:	b988      	cbnz	r0, 8004024 <__swbuf_r+0x90>
 8004000:	4638      	mov	r0, r7
 8004002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <__swbuf_r+0x9c>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d101      	bne.n	800400e <__swbuf_r+0x7a>
 800400a:	68ac      	ldr	r4, [r5, #8]
 800400c:	e7cf      	b.n	8003fae <__swbuf_r+0x1a>
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <__swbuf_r+0xa0>)
 8004010:	429c      	cmp	r4, r3
 8004012:	bf08      	it	eq
 8004014:	68ec      	ldreq	r4, [r5, #12]
 8004016:	e7ca      	b.n	8003fae <__swbuf_r+0x1a>
 8004018:	4621      	mov	r1, r4
 800401a:	4628      	mov	r0, r5
 800401c:	f000 f80c 	bl	8004038 <__swsetup_r>
 8004020:	2800      	cmp	r0, #0
 8004022:	d0cb      	beq.n	8003fbc <__swbuf_r+0x28>
 8004024:	f04f 37ff 	mov.w	r7, #4294967295
 8004028:	e7ea      	b.n	8004000 <__swbuf_r+0x6c>
 800402a:	bf00      	nop
 800402c:	08005db0 	.word	0x08005db0
 8004030:	08005dd0 	.word	0x08005dd0
 8004034:	08005d90 	.word	0x08005d90

08004038 <__swsetup_r>:
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <__swsetup_r+0xcc>)
 800403a:	b570      	push	{r4, r5, r6, lr}
 800403c:	681d      	ldr	r5, [r3, #0]
 800403e:	4606      	mov	r6, r0
 8004040:	460c      	mov	r4, r1
 8004042:	b125      	cbz	r5, 800404e <__swsetup_r+0x16>
 8004044:	69ab      	ldr	r3, [r5, #24]
 8004046:	b913      	cbnz	r3, 800404e <__swsetup_r+0x16>
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f97d 	bl	8004348 <__sinit>
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <__swsetup_r+0xd0>)
 8004050:	429c      	cmp	r4, r3
 8004052:	d10f      	bne.n	8004074 <__swsetup_r+0x3c>
 8004054:	686c      	ldr	r4, [r5, #4]
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800405c:	0719      	lsls	r1, r3, #28
 800405e:	d42c      	bmi.n	80040ba <__swsetup_r+0x82>
 8004060:	06dd      	lsls	r5, r3, #27
 8004062:	d411      	bmi.n	8004088 <__swsetup_r+0x50>
 8004064:	2309      	movs	r3, #9
 8004066:	6033      	str	r3, [r6, #0]
 8004068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	e03e      	b.n	80040f2 <__swsetup_r+0xba>
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <__swsetup_r+0xd4>)
 8004076:	429c      	cmp	r4, r3
 8004078:	d101      	bne.n	800407e <__swsetup_r+0x46>
 800407a:	68ac      	ldr	r4, [r5, #8]
 800407c:	e7eb      	b.n	8004056 <__swsetup_r+0x1e>
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <__swsetup_r+0xd8>)
 8004080:	429c      	cmp	r4, r3
 8004082:	bf08      	it	eq
 8004084:	68ec      	ldreq	r4, [r5, #12]
 8004086:	e7e6      	b.n	8004056 <__swsetup_r+0x1e>
 8004088:	0758      	lsls	r0, r3, #29
 800408a:	d512      	bpl.n	80040b2 <__swsetup_r+0x7a>
 800408c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800408e:	b141      	cbz	r1, 80040a2 <__swsetup_r+0x6a>
 8004090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004094:	4299      	cmp	r1, r3
 8004096:	d002      	beq.n	800409e <__swsetup_r+0x66>
 8004098:	4630      	mov	r0, r6
 800409a:	f000 fa59 	bl	8004550 <_free_r>
 800409e:	2300      	movs	r3, #0
 80040a0:	6363      	str	r3, [r4, #52]	; 0x34
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	2300      	movs	r3, #0
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	f043 0308 	orr.w	r3, r3, #8
 80040b8:	81a3      	strh	r3, [r4, #12]
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	b94b      	cbnz	r3, 80040d2 <__swsetup_r+0x9a>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d003      	beq.n	80040d2 <__swsetup_r+0x9a>
 80040ca:	4621      	mov	r1, r4
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f9ff 	bl	80044d0 <__smakebuf_r>
 80040d2:	89a0      	ldrh	r0, [r4, #12]
 80040d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040d8:	f010 0301 	ands.w	r3, r0, #1
 80040dc:	d00a      	beq.n	80040f4 <__swsetup_r+0xbc>
 80040de:	2300      	movs	r3, #0
 80040e0:	60a3      	str	r3, [r4, #8]
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	425b      	negs	r3, r3
 80040e6:	61a3      	str	r3, [r4, #24]
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	b943      	cbnz	r3, 80040fe <__swsetup_r+0xc6>
 80040ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040f0:	d1ba      	bne.n	8004068 <__swsetup_r+0x30>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	0781      	lsls	r1, r0, #30
 80040f6:	bf58      	it	pl
 80040f8:	6963      	ldrpl	r3, [r4, #20]
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	e7f4      	b.n	80040e8 <__swsetup_r+0xb0>
 80040fe:	2000      	movs	r0, #0
 8004100:	e7f7      	b.n	80040f2 <__swsetup_r+0xba>
 8004102:	bf00      	nop
 8004104:	20000010 	.word	0x20000010
 8004108:	08005db0 	.word	0x08005db0
 800410c:	08005dd0 	.word	0x08005dd0
 8004110:	08005d90 	.word	0x08005d90

08004114 <__sflush_r>:
 8004114:	898a      	ldrh	r2, [r1, #12]
 8004116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800411a:	4605      	mov	r5, r0
 800411c:	0710      	lsls	r0, r2, #28
 800411e:	460c      	mov	r4, r1
 8004120:	d458      	bmi.n	80041d4 <__sflush_r+0xc0>
 8004122:	684b      	ldr	r3, [r1, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	dc05      	bgt.n	8004134 <__sflush_r+0x20>
 8004128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	dc02      	bgt.n	8004134 <__sflush_r+0x20>
 800412e:	2000      	movs	r0, #0
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004136:	2e00      	cmp	r6, #0
 8004138:	d0f9      	beq.n	800412e <__sflush_r+0x1a>
 800413a:	2300      	movs	r3, #0
 800413c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004140:	682f      	ldr	r7, [r5, #0]
 8004142:	602b      	str	r3, [r5, #0]
 8004144:	d032      	beq.n	80041ac <__sflush_r+0x98>
 8004146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	075a      	lsls	r2, r3, #29
 800414c:	d505      	bpl.n	800415a <__sflush_r+0x46>
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	1ac0      	subs	r0, r0, r3
 8004152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004154:	b10b      	cbz	r3, 800415a <__sflush_r+0x46>
 8004156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004158:	1ac0      	subs	r0, r0, r3
 800415a:	2300      	movs	r3, #0
 800415c:	4602      	mov	r2, r0
 800415e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004160:	4628      	mov	r0, r5
 8004162:	6a21      	ldr	r1, [r4, #32]
 8004164:	47b0      	blx	r6
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	d106      	bne.n	800417a <__sflush_r+0x66>
 800416c:	6829      	ldr	r1, [r5, #0]
 800416e:	291d      	cmp	r1, #29
 8004170:	d82c      	bhi.n	80041cc <__sflush_r+0xb8>
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <__sflush_r+0x108>)
 8004174:	40ca      	lsrs	r2, r1
 8004176:	07d6      	lsls	r6, r2, #31
 8004178:	d528      	bpl.n	80041cc <__sflush_r+0xb8>
 800417a:	2200      	movs	r2, #0
 800417c:	6062      	str	r2, [r4, #4]
 800417e:	6922      	ldr	r2, [r4, #16]
 8004180:	04d9      	lsls	r1, r3, #19
 8004182:	6022      	str	r2, [r4, #0]
 8004184:	d504      	bpl.n	8004190 <__sflush_r+0x7c>
 8004186:	1c42      	adds	r2, r0, #1
 8004188:	d101      	bne.n	800418e <__sflush_r+0x7a>
 800418a:	682b      	ldr	r3, [r5, #0]
 800418c:	b903      	cbnz	r3, 8004190 <__sflush_r+0x7c>
 800418e:	6560      	str	r0, [r4, #84]	; 0x54
 8004190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004192:	602f      	str	r7, [r5, #0]
 8004194:	2900      	cmp	r1, #0
 8004196:	d0ca      	beq.n	800412e <__sflush_r+0x1a>
 8004198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800419c:	4299      	cmp	r1, r3
 800419e:	d002      	beq.n	80041a6 <__sflush_r+0x92>
 80041a0:	4628      	mov	r0, r5
 80041a2:	f000 f9d5 	bl	8004550 <_free_r>
 80041a6:	2000      	movs	r0, #0
 80041a8:	6360      	str	r0, [r4, #52]	; 0x34
 80041aa:	e7c1      	b.n	8004130 <__sflush_r+0x1c>
 80041ac:	6a21      	ldr	r1, [r4, #32]
 80041ae:	2301      	movs	r3, #1
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b0      	blx	r6
 80041b4:	1c41      	adds	r1, r0, #1
 80041b6:	d1c7      	bne.n	8004148 <__sflush_r+0x34>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0c4      	beq.n	8004148 <__sflush_r+0x34>
 80041be:	2b1d      	cmp	r3, #29
 80041c0:	d001      	beq.n	80041c6 <__sflush_r+0xb2>
 80041c2:	2b16      	cmp	r3, #22
 80041c4:	d101      	bne.n	80041ca <__sflush_r+0xb6>
 80041c6:	602f      	str	r7, [r5, #0]
 80041c8:	e7b1      	b.n	800412e <__sflush_r+0x1a>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	e7ad      	b.n	8004130 <__sflush_r+0x1c>
 80041d4:	690f      	ldr	r7, [r1, #16]
 80041d6:	2f00      	cmp	r7, #0
 80041d8:	d0a9      	beq.n	800412e <__sflush_r+0x1a>
 80041da:	0793      	lsls	r3, r2, #30
 80041dc:	bf18      	it	ne
 80041de:	2300      	movne	r3, #0
 80041e0:	680e      	ldr	r6, [r1, #0]
 80041e2:	bf08      	it	eq
 80041e4:	694b      	ldreq	r3, [r1, #20]
 80041e6:	eba6 0807 	sub.w	r8, r6, r7
 80041ea:	600f      	str	r7, [r1, #0]
 80041ec:	608b      	str	r3, [r1, #8]
 80041ee:	f1b8 0f00 	cmp.w	r8, #0
 80041f2:	dd9c      	ble.n	800412e <__sflush_r+0x1a>
 80041f4:	4643      	mov	r3, r8
 80041f6:	463a      	mov	r2, r7
 80041f8:	4628      	mov	r0, r5
 80041fa:	6a21      	ldr	r1, [r4, #32]
 80041fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041fe:	47b0      	blx	r6
 8004200:	2800      	cmp	r0, #0
 8004202:	dc06      	bgt.n	8004212 <__sflush_r+0xfe>
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	f04f 30ff 	mov.w	r0, #4294967295
 800420a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420e:	81a3      	strh	r3, [r4, #12]
 8004210:	e78e      	b.n	8004130 <__sflush_r+0x1c>
 8004212:	4407      	add	r7, r0
 8004214:	eba8 0800 	sub.w	r8, r8, r0
 8004218:	e7e9      	b.n	80041ee <__sflush_r+0xda>
 800421a:	bf00      	nop
 800421c:	20400001 	.word	0x20400001

08004220 <_fflush_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4605      	mov	r5, r0
 8004226:	460c      	mov	r4, r1
 8004228:	b913      	cbnz	r3, 8004230 <_fflush_r+0x10>
 800422a:	2500      	movs	r5, #0
 800422c:	4628      	mov	r0, r5
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	b118      	cbz	r0, 800423a <_fflush_r+0x1a>
 8004232:	6983      	ldr	r3, [r0, #24]
 8004234:	b90b      	cbnz	r3, 800423a <_fflush_r+0x1a>
 8004236:	f000 f887 	bl	8004348 <__sinit>
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <_fflush_r+0x6c>)
 800423c:	429c      	cmp	r4, r3
 800423e:	d11b      	bne.n	8004278 <_fflush_r+0x58>
 8004240:	686c      	ldr	r4, [r5, #4]
 8004242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ef      	beq.n	800422a <_fflush_r+0xa>
 800424a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800424c:	07d0      	lsls	r0, r2, #31
 800424e:	d404      	bmi.n	800425a <_fflush_r+0x3a>
 8004250:	0599      	lsls	r1, r3, #22
 8004252:	d402      	bmi.n	800425a <_fflush_r+0x3a>
 8004254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004256:	f000 f915 	bl	8004484 <__retarget_lock_acquire_recursive>
 800425a:	4628      	mov	r0, r5
 800425c:	4621      	mov	r1, r4
 800425e:	f7ff ff59 	bl	8004114 <__sflush_r>
 8004262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004264:	4605      	mov	r5, r0
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d4e0      	bmi.n	800422c <_fflush_r+0xc>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d4dd      	bmi.n	800422c <_fflush_r+0xc>
 8004270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004272:	f000 f908 	bl	8004486 <__retarget_lock_release_recursive>
 8004276:	e7d9      	b.n	800422c <_fflush_r+0xc>
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <_fflush_r+0x70>)
 800427a:	429c      	cmp	r4, r3
 800427c:	d101      	bne.n	8004282 <_fflush_r+0x62>
 800427e:	68ac      	ldr	r4, [r5, #8]
 8004280:	e7df      	b.n	8004242 <_fflush_r+0x22>
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <_fflush_r+0x74>)
 8004284:	429c      	cmp	r4, r3
 8004286:	bf08      	it	eq
 8004288:	68ec      	ldreq	r4, [r5, #12]
 800428a:	e7da      	b.n	8004242 <_fflush_r+0x22>
 800428c:	08005db0 	.word	0x08005db0
 8004290:	08005dd0 	.word	0x08005dd0
 8004294:	08005d90 	.word	0x08005d90

08004298 <std>:
 8004298:	2300      	movs	r3, #0
 800429a:	b510      	push	{r4, lr}
 800429c:	4604      	mov	r4, r0
 800429e:	e9c0 3300 	strd	r3, r3, [r0]
 80042a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042a6:	6083      	str	r3, [r0, #8]
 80042a8:	8181      	strh	r1, [r0, #12]
 80042aa:	6643      	str	r3, [r0, #100]	; 0x64
 80042ac:	81c2      	strh	r2, [r0, #14]
 80042ae:	6183      	str	r3, [r0, #24]
 80042b0:	4619      	mov	r1, r3
 80042b2:	2208      	movs	r2, #8
 80042b4:	305c      	adds	r0, #92	; 0x5c
 80042b6:	f7ff fdc3 	bl	8003e40 <memset>
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <std+0x38>)
 80042bc:	6224      	str	r4, [r4, #32]
 80042be:	6263      	str	r3, [r4, #36]	; 0x24
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <std+0x3c>)
 80042c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <std+0x40>)
 80042c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <std+0x44>)
 80042ca:	6323      	str	r3, [r4, #48]	; 0x30
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	08004d29 	.word	0x08004d29
 80042d4:	08004d4b 	.word	0x08004d4b
 80042d8:	08004d83 	.word	0x08004d83
 80042dc:	08004da7 	.word	0x08004da7

080042e0 <_cleanup_r>:
 80042e0:	4901      	ldr	r1, [pc, #4]	; (80042e8 <_cleanup_r+0x8>)
 80042e2:	f000 b8af 	b.w	8004444 <_fwalk_reent>
 80042e6:	bf00      	nop
 80042e8:	08004221 	.word	0x08004221

080042ec <__sfmoreglue>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	2568      	movs	r5, #104	; 0x68
 80042f0:	1e4a      	subs	r2, r1, #1
 80042f2:	4355      	muls	r5, r2
 80042f4:	460e      	mov	r6, r1
 80042f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042fa:	f000 f975 	bl	80045e8 <_malloc_r>
 80042fe:	4604      	mov	r4, r0
 8004300:	b140      	cbz	r0, 8004314 <__sfmoreglue+0x28>
 8004302:	2100      	movs	r1, #0
 8004304:	e9c0 1600 	strd	r1, r6, [r0]
 8004308:	300c      	adds	r0, #12
 800430a:	60a0      	str	r0, [r4, #8]
 800430c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004310:	f7ff fd96 	bl	8003e40 <memset>
 8004314:	4620      	mov	r0, r4
 8004316:	bd70      	pop	{r4, r5, r6, pc}

08004318 <__sfp_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__sfp_lock_acquire+0x8>)
 800431a:	f000 b8b3 	b.w	8004484 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	2000019c 	.word	0x2000019c

08004324 <__sfp_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__sfp_lock_release+0x8>)
 8004326:	f000 b8ae 	b.w	8004486 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	2000019c 	.word	0x2000019c

08004330 <__sinit_lock_acquire>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__sinit_lock_acquire+0x8>)
 8004332:	f000 b8a7 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	20000197 	.word	0x20000197

0800433c <__sinit_lock_release>:
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <__sinit_lock_release+0x8>)
 800433e:	f000 b8a2 	b.w	8004486 <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	20000197 	.word	0x20000197

08004348 <__sinit>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	f7ff fff0 	bl	8004330 <__sinit_lock_acquire>
 8004350:	69a3      	ldr	r3, [r4, #24]
 8004352:	b11b      	cbz	r3, 800435c <__sinit+0x14>
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f7ff bff0 	b.w	800433c <__sinit_lock_release>
 800435c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004360:	6523      	str	r3, [r4, #80]	; 0x50
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <__sinit+0x68>)
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <__sinit+0x6c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	62a2      	str	r2, [r4, #40]	; 0x28
 800436a:	42a3      	cmp	r3, r4
 800436c:	bf08      	it	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	4620      	mov	r0, r4
 8004372:	bf08      	it	eq
 8004374:	61a3      	streq	r3, [r4, #24]
 8004376:	f000 f81f 	bl	80043b8 <__sfp>
 800437a:	6060      	str	r0, [r4, #4]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f81b 	bl	80043b8 <__sfp>
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f817 	bl	80043b8 <__sfp>
 800438a:	2200      	movs	r2, #0
 800438c:	2104      	movs	r1, #4
 800438e:	60e0      	str	r0, [r4, #12]
 8004390:	6860      	ldr	r0, [r4, #4]
 8004392:	f7ff ff81 	bl	8004298 <std>
 8004396:	2201      	movs	r2, #1
 8004398:	2109      	movs	r1, #9
 800439a:	68a0      	ldr	r0, [r4, #8]
 800439c:	f7ff ff7c 	bl	8004298 <std>
 80043a0:	2202      	movs	r2, #2
 80043a2:	2112      	movs	r1, #18
 80043a4:	68e0      	ldr	r0, [r4, #12]
 80043a6:	f7ff ff77 	bl	8004298 <std>
 80043aa:	2301      	movs	r3, #1
 80043ac:	61a3      	str	r3, [r4, #24]
 80043ae:	e7d1      	b.n	8004354 <__sinit+0xc>
 80043b0:	08005d8c 	.word	0x08005d8c
 80043b4:	080042e1 	.word	0x080042e1

080043b8 <__sfp>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	4607      	mov	r7, r0
 80043bc:	f7ff ffac 	bl	8004318 <__sfp_lock_acquire>
 80043c0:	4b1e      	ldr	r3, [pc, #120]	; (800443c <__sfp+0x84>)
 80043c2:	681e      	ldr	r6, [r3, #0]
 80043c4:	69b3      	ldr	r3, [r6, #24]
 80043c6:	b913      	cbnz	r3, 80043ce <__sfp+0x16>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7ff ffbd 	bl	8004348 <__sinit>
 80043ce:	3648      	adds	r6, #72	; 0x48
 80043d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	d503      	bpl.n	80043e0 <__sfp+0x28>
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	b30b      	cbz	r3, 8004420 <__sfp+0x68>
 80043dc:	6836      	ldr	r6, [r6, #0]
 80043de:	e7f7      	b.n	80043d0 <__sfp+0x18>
 80043e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043e4:	b9d5      	cbnz	r5, 800441c <__sfp+0x64>
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <__sfp+0x88>)
 80043e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ec:	60e3      	str	r3, [r4, #12]
 80043ee:	6665      	str	r5, [r4, #100]	; 0x64
 80043f0:	f000 f847 	bl	8004482 <__retarget_lock_init_recursive>
 80043f4:	f7ff ff96 	bl	8004324 <__sfp_lock_release>
 80043f8:	2208      	movs	r2, #8
 80043fa:	4629      	mov	r1, r5
 80043fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004404:	6025      	str	r5, [r4, #0]
 8004406:	61a5      	str	r5, [r4, #24]
 8004408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800440c:	f7ff fd18 	bl	8003e40 <memset>
 8004410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004418:	4620      	mov	r0, r4
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441c:	3468      	adds	r4, #104	; 0x68
 800441e:	e7d9      	b.n	80043d4 <__sfp+0x1c>
 8004420:	2104      	movs	r1, #4
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff ff62 	bl	80042ec <__sfmoreglue>
 8004428:	4604      	mov	r4, r0
 800442a:	6030      	str	r0, [r6, #0]
 800442c:	2800      	cmp	r0, #0
 800442e:	d1d5      	bne.n	80043dc <__sfp+0x24>
 8004430:	f7ff ff78 	bl	8004324 <__sfp_lock_release>
 8004434:	230c      	movs	r3, #12
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	e7ee      	b.n	8004418 <__sfp+0x60>
 800443a:	bf00      	nop
 800443c:	08005d8c 	.word	0x08005d8c
 8004440:	ffff0001 	.word	0xffff0001

08004444 <_fwalk_reent>:
 8004444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004448:	4606      	mov	r6, r0
 800444a:	4688      	mov	r8, r1
 800444c:	2700      	movs	r7, #0
 800444e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004456:	f1b9 0901 	subs.w	r9, r9, #1
 800445a:	d505      	bpl.n	8004468 <_fwalk_reent+0x24>
 800445c:	6824      	ldr	r4, [r4, #0]
 800445e:	2c00      	cmp	r4, #0
 8004460:	d1f7      	bne.n	8004452 <_fwalk_reent+0xe>
 8004462:	4638      	mov	r0, r7
 8004464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004468:	89ab      	ldrh	r3, [r5, #12]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d907      	bls.n	800447e <_fwalk_reent+0x3a>
 800446e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004472:	3301      	adds	r3, #1
 8004474:	d003      	beq.n	800447e <_fwalk_reent+0x3a>
 8004476:	4629      	mov	r1, r5
 8004478:	4630      	mov	r0, r6
 800447a:	47c0      	blx	r8
 800447c:	4307      	orrs	r7, r0
 800447e:	3568      	adds	r5, #104	; 0x68
 8004480:	e7e9      	b.n	8004456 <_fwalk_reent+0x12>

08004482 <__retarget_lock_init_recursive>:
 8004482:	4770      	bx	lr

08004484 <__retarget_lock_acquire_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_release_recursive>:
 8004486:	4770      	bx	lr

08004488 <__swhatbuf_r>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	460e      	mov	r6, r1
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	4614      	mov	r4, r2
 8004492:	2900      	cmp	r1, #0
 8004494:	461d      	mov	r5, r3
 8004496:	b096      	sub	sp, #88	; 0x58
 8004498:	da07      	bge.n	80044aa <__swhatbuf_r+0x22>
 800449a:	2300      	movs	r3, #0
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	89b3      	ldrh	r3, [r6, #12]
 80044a0:	061a      	lsls	r2, r3, #24
 80044a2:	d410      	bmi.n	80044c6 <__swhatbuf_r+0x3e>
 80044a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a8:	e00e      	b.n	80044c8 <__swhatbuf_r+0x40>
 80044aa:	466a      	mov	r2, sp
 80044ac:	f000 fca2 	bl	8004df4 <_fstat_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	dbf2      	blt.n	800449a <__swhatbuf_r+0x12>
 80044b4:	9a01      	ldr	r2, [sp, #4]
 80044b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044be:	425a      	negs	r2, r3
 80044c0:	415a      	adcs	r2, r3
 80044c2:	602a      	str	r2, [r5, #0]
 80044c4:	e7ee      	b.n	80044a4 <__swhatbuf_r+0x1c>
 80044c6:	2340      	movs	r3, #64	; 0x40
 80044c8:	2000      	movs	r0, #0
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	b016      	add	sp, #88	; 0x58
 80044ce:	bd70      	pop	{r4, r5, r6, pc}

080044d0 <__smakebuf_r>:
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044d4:	079d      	lsls	r5, r3, #30
 80044d6:	4606      	mov	r6, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	d507      	bpl.n	80044ec <__smakebuf_r+0x1c>
 80044dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2301      	movs	r3, #1
 80044e6:	6163      	str	r3, [r4, #20]
 80044e8:	b002      	add	sp, #8
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	466a      	mov	r2, sp
 80044ee:	ab01      	add	r3, sp, #4
 80044f0:	f7ff ffca 	bl	8004488 <__swhatbuf_r>
 80044f4:	9900      	ldr	r1, [sp, #0]
 80044f6:	4605      	mov	r5, r0
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 f875 	bl	80045e8 <_malloc_r>
 80044fe:	b948      	cbnz	r0, 8004514 <__smakebuf_r+0x44>
 8004500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004504:	059a      	lsls	r2, r3, #22
 8004506:	d4ef      	bmi.n	80044e8 <__smakebuf_r+0x18>
 8004508:	f023 0303 	bic.w	r3, r3, #3
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	e7e3      	b.n	80044dc <__smakebuf_r+0xc>
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <__smakebuf_r+0x7c>)
 8004516:	62b3      	str	r3, [r6, #40]	; 0x28
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	6020      	str	r0, [r4, #0]
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	9b00      	ldr	r3, [sp, #0]
 8004524:	6120      	str	r0, [r4, #16]
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	b15b      	cbz	r3, 8004544 <__smakebuf_r+0x74>
 800452c:	4630      	mov	r0, r6
 800452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004532:	f000 fc71 	bl	8004e18 <_isatty_r>
 8004536:	b128      	cbz	r0, 8004544 <__smakebuf_r+0x74>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	89a0      	ldrh	r0, [r4, #12]
 8004546:	4305      	orrs	r5, r0
 8004548:	81a5      	strh	r5, [r4, #12]
 800454a:	e7cd      	b.n	80044e8 <__smakebuf_r+0x18>
 800454c:	080042e1 	.word	0x080042e1

08004550 <_free_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4605      	mov	r5, r0
 8004554:	2900      	cmp	r1, #0
 8004556:	d043      	beq.n	80045e0 <_free_r+0x90>
 8004558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455c:	1f0c      	subs	r4, r1, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfb8      	it	lt
 8004562:	18e4      	addlt	r4, r4, r3
 8004564:	f000 fc88 	bl	8004e78 <__malloc_lock>
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <_free_r+0x94>)
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	4610      	mov	r0, r2
 800456e:	b933      	cbnz	r3, 800457e <_free_r+0x2e>
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	6014      	str	r4, [r2, #0]
 8004574:	4628      	mov	r0, r5
 8004576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457a:	f000 bc83 	b.w	8004e84 <__malloc_unlock>
 800457e:	42a3      	cmp	r3, r4
 8004580:	d90a      	bls.n	8004598 <_free_r+0x48>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	1862      	adds	r2, r4, r1
 8004586:	4293      	cmp	r3, r2
 8004588:	bf01      	itttt	eq
 800458a:	681a      	ldreq	r2, [r3, #0]
 800458c:	685b      	ldreq	r3, [r3, #4]
 800458e:	1852      	addeq	r2, r2, r1
 8004590:	6022      	streq	r2, [r4, #0]
 8004592:	6063      	str	r3, [r4, #4]
 8004594:	6004      	str	r4, [r0, #0]
 8004596:	e7ed      	b.n	8004574 <_free_r+0x24>
 8004598:	461a      	mov	r2, r3
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b10b      	cbz	r3, 80045a2 <_free_r+0x52>
 800459e:	42a3      	cmp	r3, r4
 80045a0:	d9fa      	bls.n	8004598 <_free_r+0x48>
 80045a2:	6811      	ldr	r1, [r2, #0]
 80045a4:	1850      	adds	r0, r2, r1
 80045a6:	42a0      	cmp	r0, r4
 80045a8:	d10b      	bne.n	80045c2 <_free_r+0x72>
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	4401      	add	r1, r0
 80045ae:	1850      	adds	r0, r2, r1
 80045b0:	4283      	cmp	r3, r0
 80045b2:	6011      	str	r1, [r2, #0]
 80045b4:	d1de      	bne.n	8004574 <_free_r+0x24>
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4401      	add	r1, r0
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	e7d8      	b.n	8004574 <_free_r+0x24>
 80045c2:	d902      	bls.n	80045ca <_free_r+0x7a>
 80045c4:	230c      	movs	r3, #12
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	e7d4      	b.n	8004574 <_free_r+0x24>
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1821      	adds	r1, r4, r0
 80045ce:	428b      	cmp	r3, r1
 80045d0:	bf01      	itttt	eq
 80045d2:	6819      	ldreq	r1, [r3, #0]
 80045d4:	685b      	ldreq	r3, [r3, #4]
 80045d6:	1809      	addeq	r1, r1, r0
 80045d8:	6021      	streq	r1, [r4, #0]
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	6054      	str	r4, [r2, #4]
 80045de:	e7c9      	b.n	8004574 <_free_r+0x24>
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	20000094 	.word	0x20000094

080045e8 <_malloc_r>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	1ccd      	adds	r5, r1, #3
 80045ec:	f025 0503 	bic.w	r5, r5, #3
 80045f0:	3508      	adds	r5, #8
 80045f2:	2d0c      	cmp	r5, #12
 80045f4:	bf38      	it	cc
 80045f6:	250c      	movcc	r5, #12
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	4606      	mov	r6, r0
 80045fc:	db01      	blt.n	8004602 <_malloc_r+0x1a>
 80045fe:	42a9      	cmp	r1, r5
 8004600:	d903      	bls.n	800460a <_malloc_r+0x22>
 8004602:	230c      	movs	r3, #12
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	2000      	movs	r0, #0
 8004608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460a:	f000 fc35 	bl	8004e78 <__malloc_lock>
 800460e:	4921      	ldr	r1, [pc, #132]	; (8004694 <_malloc_r+0xac>)
 8004610:	680a      	ldr	r2, [r1, #0]
 8004612:	4614      	mov	r4, r2
 8004614:	b99c      	cbnz	r4, 800463e <_malloc_r+0x56>
 8004616:	4f20      	ldr	r7, [pc, #128]	; (8004698 <_malloc_r+0xb0>)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	b923      	cbnz	r3, 8004626 <_malloc_r+0x3e>
 800461c:	4621      	mov	r1, r4
 800461e:	4630      	mov	r0, r6
 8004620:	f000 fb72 	bl	8004d08 <_sbrk_r>
 8004624:	6038      	str	r0, [r7, #0]
 8004626:	4629      	mov	r1, r5
 8004628:	4630      	mov	r0, r6
 800462a:	f000 fb6d 	bl	8004d08 <_sbrk_r>
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	d123      	bne.n	800467a <_malloc_r+0x92>
 8004632:	230c      	movs	r3, #12
 8004634:	4630      	mov	r0, r6
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f000 fc24 	bl	8004e84 <__malloc_unlock>
 800463c:	e7e3      	b.n	8004606 <_malloc_r+0x1e>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	1b5b      	subs	r3, r3, r5
 8004642:	d417      	bmi.n	8004674 <_malloc_r+0x8c>
 8004644:	2b0b      	cmp	r3, #11
 8004646:	d903      	bls.n	8004650 <_malloc_r+0x68>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	441c      	add	r4, r3
 800464c:	6025      	str	r5, [r4, #0]
 800464e:	e004      	b.n	800465a <_malloc_r+0x72>
 8004650:	6863      	ldr	r3, [r4, #4]
 8004652:	42a2      	cmp	r2, r4
 8004654:	bf0c      	ite	eq
 8004656:	600b      	streq	r3, [r1, #0]
 8004658:	6053      	strne	r3, [r2, #4]
 800465a:	4630      	mov	r0, r6
 800465c:	f000 fc12 	bl	8004e84 <__malloc_unlock>
 8004660:	f104 000b 	add.w	r0, r4, #11
 8004664:	1d23      	adds	r3, r4, #4
 8004666:	f020 0007 	bic.w	r0, r0, #7
 800466a:	1ac2      	subs	r2, r0, r3
 800466c:	d0cc      	beq.n	8004608 <_malloc_r+0x20>
 800466e:	1a1b      	subs	r3, r3, r0
 8004670:	50a3      	str	r3, [r4, r2]
 8004672:	e7c9      	b.n	8004608 <_malloc_r+0x20>
 8004674:	4622      	mov	r2, r4
 8004676:	6864      	ldr	r4, [r4, #4]
 8004678:	e7cc      	b.n	8004614 <_malloc_r+0x2c>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d0e3      	beq.n	800464c <_malloc_r+0x64>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4630      	mov	r0, r6
 8004688:	f000 fb3e 	bl	8004d08 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d1dd      	bne.n	800464c <_malloc_r+0x64>
 8004690:	e7cf      	b.n	8004632 <_malloc_r+0x4a>
 8004692:	bf00      	nop
 8004694:	20000094 	.word	0x20000094
 8004698:	20000098 	.word	0x20000098

0800469c <__sfputc_r>:
 800469c:	6893      	ldr	r3, [r2, #8]
 800469e:	b410      	push	{r4}
 80046a0:	3b01      	subs	r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	6093      	str	r3, [r2, #8]
 80046a6:	da07      	bge.n	80046b8 <__sfputc_r+0x1c>
 80046a8:	6994      	ldr	r4, [r2, #24]
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	db01      	blt.n	80046b2 <__sfputc_r+0x16>
 80046ae:	290a      	cmp	r1, #10
 80046b0:	d102      	bne.n	80046b8 <__sfputc_r+0x1c>
 80046b2:	bc10      	pop	{r4}
 80046b4:	f7ff bc6e 	b.w	8003f94 <__swbuf_r>
 80046b8:	6813      	ldr	r3, [r2, #0]
 80046ba:	1c58      	adds	r0, r3, #1
 80046bc:	6010      	str	r0, [r2, #0]
 80046be:	7019      	strb	r1, [r3, #0]
 80046c0:	4608      	mov	r0, r1
 80046c2:	bc10      	pop	{r4}
 80046c4:	4770      	bx	lr

080046c6 <__sfputs_r>:
 80046c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c8:	4606      	mov	r6, r0
 80046ca:	460f      	mov	r7, r1
 80046cc:	4614      	mov	r4, r2
 80046ce:	18d5      	adds	r5, r2, r3
 80046d0:	42ac      	cmp	r4, r5
 80046d2:	d101      	bne.n	80046d8 <__sfputs_r+0x12>
 80046d4:	2000      	movs	r0, #0
 80046d6:	e007      	b.n	80046e8 <__sfputs_r+0x22>
 80046d8:	463a      	mov	r2, r7
 80046da:	4630      	mov	r0, r6
 80046dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e0:	f7ff ffdc 	bl	800469c <__sfputc_r>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d1f3      	bne.n	80046d0 <__sfputs_r+0xa>
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046ec <_vfiprintf_r>:
 80046ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f0:	460d      	mov	r5, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	4698      	mov	r8, r3
 80046f6:	4606      	mov	r6, r0
 80046f8:	b09d      	sub	sp, #116	; 0x74
 80046fa:	b118      	cbz	r0, 8004704 <_vfiprintf_r+0x18>
 80046fc:	6983      	ldr	r3, [r0, #24]
 80046fe:	b90b      	cbnz	r3, 8004704 <_vfiprintf_r+0x18>
 8004700:	f7ff fe22 	bl	8004348 <__sinit>
 8004704:	4b89      	ldr	r3, [pc, #548]	; (800492c <_vfiprintf_r+0x240>)
 8004706:	429d      	cmp	r5, r3
 8004708:	d11b      	bne.n	8004742 <_vfiprintf_r+0x56>
 800470a:	6875      	ldr	r5, [r6, #4]
 800470c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800470e:	07d9      	lsls	r1, r3, #31
 8004710:	d405      	bmi.n	800471e <_vfiprintf_r+0x32>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	059a      	lsls	r2, r3, #22
 8004716:	d402      	bmi.n	800471e <_vfiprintf_r+0x32>
 8004718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471a:	f7ff feb3 	bl	8004484 <__retarget_lock_acquire_recursive>
 800471e:	89ab      	ldrh	r3, [r5, #12]
 8004720:	071b      	lsls	r3, r3, #28
 8004722:	d501      	bpl.n	8004728 <_vfiprintf_r+0x3c>
 8004724:	692b      	ldr	r3, [r5, #16]
 8004726:	b9eb      	cbnz	r3, 8004764 <_vfiprintf_r+0x78>
 8004728:	4629      	mov	r1, r5
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff fc84 	bl	8004038 <__swsetup_r>
 8004730:	b1c0      	cbz	r0, 8004764 <_vfiprintf_r+0x78>
 8004732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004734:	07dc      	lsls	r4, r3, #31
 8004736:	d50e      	bpl.n	8004756 <_vfiprintf_r+0x6a>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	b01d      	add	sp, #116	; 0x74
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <_vfiprintf_r+0x244>)
 8004744:	429d      	cmp	r5, r3
 8004746:	d101      	bne.n	800474c <_vfiprintf_r+0x60>
 8004748:	68b5      	ldr	r5, [r6, #8]
 800474a:	e7df      	b.n	800470c <_vfiprintf_r+0x20>
 800474c:	4b79      	ldr	r3, [pc, #484]	; (8004934 <_vfiprintf_r+0x248>)
 800474e:	429d      	cmp	r5, r3
 8004750:	bf08      	it	eq
 8004752:	68f5      	ldreq	r5, [r6, #12]
 8004754:	e7da      	b.n	800470c <_vfiprintf_r+0x20>
 8004756:	89ab      	ldrh	r3, [r5, #12]
 8004758:	0598      	lsls	r0, r3, #22
 800475a:	d4ed      	bmi.n	8004738 <_vfiprintf_r+0x4c>
 800475c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800475e:	f7ff fe92 	bl	8004486 <__retarget_lock_release_recursive>
 8004762:	e7e9      	b.n	8004738 <_vfiprintf_r+0x4c>
 8004764:	2300      	movs	r3, #0
 8004766:	9309      	str	r3, [sp, #36]	; 0x24
 8004768:	2320      	movs	r3, #32
 800476a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800476e:	2330      	movs	r3, #48	; 0x30
 8004770:	f04f 0901 	mov.w	r9, #1
 8004774:	f8cd 800c 	str.w	r8, [sp, #12]
 8004778:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004938 <_vfiprintf_r+0x24c>
 800477c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004780:	4623      	mov	r3, r4
 8004782:	469a      	mov	sl, r3
 8004784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004788:	b10a      	cbz	r2, 800478e <_vfiprintf_r+0xa2>
 800478a:	2a25      	cmp	r2, #37	; 0x25
 800478c:	d1f9      	bne.n	8004782 <_vfiprintf_r+0x96>
 800478e:	ebba 0b04 	subs.w	fp, sl, r4
 8004792:	d00b      	beq.n	80047ac <_vfiprintf_r+0xc0>
 8004794:	465b      	mov	r3, fp
 8004796:	4622      	mov	r2, r4
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ff93 	bl	80046c6 <__sfputs_r>
 80047a0:	3001      	adds	r0, #1
 80047a2:	f000 80aa 	beq.w	80048fa <_vfiprintf_r+0x20e>
 80047a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a8:	445a      	add	r2, fp
 80047aa:	9209      	str	r2, [sp, #36]	; 0x24
 80047ac:	f89a 3000 	ldrb.w	r3, [sl]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a2 	beq.w	80048fa <_vfiprintf_r+0x20e>
 80047b6:	2300      	movs	r3, #0
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047c0:	f10a 0a01 	add.w	sl, sl, #1
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	9307      	str	r3, [sp, #28]
 80047c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047cc:	931a      	str	r3, [sp, #104]	; 0x68
 80047ce:	4654      	mov	r4, sl
 80047d0:	2205      	movs	r2, #5
 80047d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d6:	4858      	ldr	r0, [pc, #352]	; (8004938 <_vfiprintf_r+0x24c>)
 80047d8:	f000 fb40 	bl	8004e5c <memchr>
 80047dc:	9a04      	ldr	r2, [sp, #16]
 80047de:	b9d8      	cbnz	r0, 8004818 <_vfiprintf_r+0x12c>
 80047e0:	06d1      	lsls	r1, r2, #27
 80047e2:	bf44      	itt	mi
 80047e4:	2320      	movmi	r3, #32
 80047e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ea:	0713      	lsls	r3, r2, #28
 80047ec:	bf44      	itt	mi
 80047ee:	232b      	movmi	r3, #43	; 0x2b
 80047f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047f4:	f89a 3000 	ldrb.w	r3, [sl]
 80047f8:	2b2a      	cmp	r3, #42	; 0x2a
 80047fa:	d015      	beq.n	8004828 <_vfiprintf_r+0x13c>
 80047fc:	4654      	mov	r4, sl
 80047fe:	2000      	movs	r0, #0
 8004800:	f04f 0c0a 	mov.w	ip, #10
 8004804:	9a07      	ldr	r2, [sp, #28]
 8004806:	4621      	mov	r1, r4
 8004808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800480c:	3b30      	subs	r3, #48	; 0x30
 800480e:	2b09      	cmp	r3, #9
 8004810:	d94e      	bls.n	80048b0 <_vfiprintf_r+0x1c4>
 8004812:	b1b0      	cbz	r0, 8004842 <_vfiprintf_r+0x156>
 8004814:	9207      	str	r2, [sp, #28]
 8004816:	e014      	b.n	8004842 <_vfiprintf_r+0x156>
 8004818:	eba0 0308 	sub.w	r3, r0, r8
 800481c:	fa09 f303 	lsl.w	r3, r9, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	46a2      	mov	sl, r4
 8004824:	9304      	str	r3, [sp, #16]
 8004826:	e7d2      	b.n	80047ce <_vfiprintf_r+0xe2>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	1d19      	adds	r1, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	9103      	str	r1, [sp, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfbb      	ittet	lt
 8004834:	425b      	neglt	r3, r3
 8004836:	f042 0202 	orrlt.w	r2, r2, #2
 800483a:	9307      	strge	r3, [sp, #28]
 800483c:	9307      	strlt	r3, [sp, #28]
 800483e:	bfb8      	it	lt
 8004840:	9204      	strlt	r2, [sp, #16]
 8004842:	7823      	ldrb	r3, [r4, #0]
 8004844:	2b2e      	cmp	r3, #46	; 0x2e
 8004846:	d10c      	bne.n	8004862 <_vfiprintf_r+0x176>
 8004848:	7863      	ldrb	r3, [r4, #1]
 800484a:	2b2a      	cmp	r3, #42	; 0x2a
 800484c:	d135      	bne.n	80048ba <_vfiprintf_r+0x1ce>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	3402      	adds	r4, #2
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	9203      	str	r2, [sp, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	bfb8      	it	lt
 800485c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004948 <_vfiprintf_r+0x25c>
 8004866:	2203      	movs	r2, #3
 8004868:	4650      	mov	r0, sl
 800486a:	7821      	ldrb	r1, [r4, #0]
 800486c:	f000 faf6 	bl	8004e5c <memchr>
 8004870:	b140      	cbz	r0, 8004884 <_vfiprintf_r+0x198>
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	eba0 000a 	sub.w	r0, r0, sl
 8004878:	fa03 f000 	lsl.w	r0, r3, r0
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	3401      	adds	r4, #1
 8004880:	4303      	orrs	r3, r0
 8004882:	9304      	str	r3, [sp, #16]
 8004884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004888:	2206      	movs	r2, #6
 800488a:	482c      	ldr	r0, [pc, #176]	; (800493c <_vfiprintf_r+0x250>)
 800488c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004890:	f000 fae4 	bl	8004e5c <memchr>
 8004894:	2800      	cmp	r0, #0
 8004896:	d03f      	beq.n	8004918 <_vfiprintf_r+0x22c>
 8004898:	4b29      	ldr	r3, [pc, #164]	; (8004940 <_vfiprintf_r+0x254>)
 800489a:	bb1b      	cbnz	r3, 80048e4 <_vfiprintf_r+0x1f8>
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	3307      	adds	r3, #7
 80048a0:	f023 0307 	bic.w	r3, r3, #7
 80048a4:	3308      	adds	r3, #8
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048aa:	443b      	add	r3, r7
 80048ac:	9309      	str	r3, [sp, #36]	; 0x24
 80048ae:	e767      	b.n	8004780 <_vfiprintf_r+0x94>
 80048b0:	460c      	mov	r4, r1
 80048b2:	2001      	movs	r0, #1
 80048b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048b8:	e7a5      	b.n	8004806 <_vfiprintf_r+0x11a>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f04f 0c0a 	mov.w	ip, #10
 80048c0:	4619      	mov	r1, r3
 80048c2:	3401      	adds	r4, #1
 80048c4:	9305      	str	r3, [sp, #20]
 80048c6:	4620      	mov	r0, r4
 80048c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048cc:	3a30      	subs	r2, #48	; 0x30
 80048ce:	2a09      	cmp	r2, #9
 80048d0:	d903      	bls.n	80048da <_vfiprintf_r+0x1ee>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c5      	beq.n	8004862 <_vfiprintf_r+0x176>
 80048d6:	9105      	str	r1, [sp, #20]
 80048d8:	e7c3      	b.n	8004862 <_vfiprintf_r+0x176>
 80048da:	4604      	mov	r4, r0
 80048dc:	2301      	movs	r3, #1
 80048de:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e2:	e7f0      	b.n	80048c6 <_vfiprintf_r+0x1da>
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4630      	mov	r0, r6
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <_vfiprintf_r+0x258>)
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	f3af 8000 	nop.w
 80048f4:	4607      	mov	r7, r0
 80048f6:	1c78      	adds	r0, r7, #1
 80048f8:	d1d6      	bne.n	80048a8 <_vfiprintf_r+0x1bc>
 80048fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fc:	07d9      	lsls	r1, r3, #31
 80048fe:	d405      	bmi.n	800490c <_vfiprintf_r+0x220>
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	059a      	lsls	r2, r3, #22
 8004904:	d402      	bmi.n	800490c <_vfiprintf_r+0x220>
 8004906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004908:	f7ff fdbd 	bl	8004486 <__retarget_lock_release_recursive>
 800490c:	89ab      	ldrh	r3, [r5, #12]
 800490e:	065b      	lsls	r3, r3, #25
 8004910:	f53f af12 	bmi.w	8004738 <_vfiprintf_r+0x4c>
 8004914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004916:	e711      	b.n	800473c <_vfiprintf_r+0x50>
 8004918:	ab03      	add	r3, sp, #12
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	462a      	mov	r2, r5
 800491e:	4630      	mov	r0, r6
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <_vfiprintf_r+0x258>)
 8004922:	a904      	add	r1, sp, #16
 8004924:	f000 f882 	bl	8004a2c <_printf_i>
 8004928:	e7e4      	b.n	80048f4 <_vfiprintf_r+0x208>
 800492a:	bf00      	nop
 800492c:	08005db0 	.word	0x08005db0
 8004930:	08005dd0 	.word	0x08005dd0
 8004934:	08005d90 	.word	0x08005d90
 8004938:	08005df0 	.word	0x08005df0
 800493c:	08005dfa 	.word	0x08005dfa
 8004940:	00000000 	.word	0x00000000
 8004944:	080046c7 	.word	0x080046c7
 8004948:	08005df6 	.word	0x08005df6

0800494c <_printf_common>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	4616      	mov	r6, r2
 8004952:	4699      	mov	r9, r3
 8004954:	688a      	ldr	r2, [r1, #8]
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	4607      	mov	r7, r0
 800495a:	4293      	cmp	r3, r2
 800495c:	bfb8      	it	lt
 800495e:	4613      	movlt	r3, r2
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004966:	460c      	mov	r4, r1
 8004968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800496c:	b10a      	cbz	r2, 8004972 <_printf_common+0x26>
 800496e:	3301      	adds	r3, #1
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	0699      	lsls	r1, r3, #26
 8004976:	bf42      	ittt	mi
 8004978:	6833      	ldrmi	r3, [r6, #0]
 800497a:	3302      	addmi	r3, #2
 800497c:	6033      	strmi	r3, [r6, #0]
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	f015 0506 	ands.w	r5, r5, #6
 8004984:	d106      	bne.n	8004994 <_printf_common+0x48>
 8004986:	f104 0a19 	add.w	sl, r4, #25
 800498a:	68e3      	ldr	r3, [r4, #12]
 800498c:	6832      	ldr	r2, [r6, #0]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	42ab      	cmp	r3, r5
 8004992:	dc28      	bgt.n	80049e6 <_printf_common+0x9a>
 8004994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004998:	1e13      	subs	r3, r2, #0
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	bf18      	it	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	0692      	lsls	r2, r2, #26
 80049a2:	d42d      	bmi.n	8004a00 <_printf_common+0xb4>
 80049a4:	4649      	mov	r1, r9
 80049a6:	4638      	mov	r0, r7
 80049a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d020      	beq.n	80049f4 <_printf_common+0xa8>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	68e5      	ldr	r5, [r4, #12]
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf18      	it	ne
 80049be:	2500      	movne	r5, #0
 80049c0:	6832      	ldr	r2, [r6, #0]
 80049c2:	f04f 0600 	mov.w	r6, #0
 80049c6:	68a3      	ldr	r3, [r4, #8]
 80049c8:	bf08      	it	eq
 80049ca:	1aad      	subeq	r5, r5, r2
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	bf08      	it	eq
 80049d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bfc4      	itt	gt
 80049d8:	1a9b      	subgt	r3, r3, r2
 80049da:	18ed      	addgt	r5, r5, r3
 80049dc:	341a      	adds	r4, #26
 80049de:	42b5      	cmp	r5, r6
 80049e0:	d11a      	bne.n	8004a18 <_printf_common+0xcc>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e008      	b.n	80049f8 <_printf_common+0xac>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4652      	mov	r2, sl
 80049ea:	4649      	mov	r1, r9
 80049ec:	4638      	mov	r0, r7
 80049ee:	47c0      	blx	r8
 80049f0:	3001      	adds	r0, #1
 80049f2:	d103      	bne.n	80049fc <_printf_common+0xb0>
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	3501      	adds	r5, #1
 80049fe:	e7c4      	b.n	800498a <_printf_common+0x3e>
 8004a00:	2030      	movs	r0, #48	; 0x30
 8004a02:	18e1      	adds	r1, r4, r3
 8004a04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a0e:	4422      	add	r2, r4
 8004a10:	3302      	adds	r3, #2
 8004a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a16:	e7c5      	b.n	80049a4 <_printf_common+0x58>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0e6      	beq.n	80049f4 <_printf_common+0xa8>
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7d9      	b.n	80049de <_printf_common+0x92>
	...

08004a2c <_printf_i>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	460c      	mov	r4, r1
 8004a32:	7e27      	ldrb	r7, [r4, #24]
 8004a34:	4691      	mov	r9, r2
 8004a36:	2f78      	cmp	r7, #120	; 0x78
 8004a38:	4680      	mov	r8, r0
 8004a3a:	469a      	mov	sl, r3
 8004a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a42:	d807      	bhi.n	8004a54 <_printf_i+0x28>
 8004a44:	2f62      	cmp	r7, #98	; 0x62
 8004a46:	d80a      	bhi.n	8004a5e <_printf_i+0x32>
 8004a48:	2f00      	cmp	r7, #0
 8004a4a:	f000 80d9 	beq.w	8004c00 <_printf_i+0x1d4>
 8004a4e:	2f58      	cmp	r7, #88	; 0x58
 8004a50:	f000 80a4 	beq.w	8004b9c <_printf_i+0x170>
 8004a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a5c:	e03a      	b.n	8004ad4 <_printf_i+0xa8>
 8004a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d8f6      	bhi.n	8004a54 <_printf_i+0x28>
 8004a66:	a001      	add	r0, pc, #4	; (adr r0, 8004a6c <_printf_i+0x40>)
 8004a68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004a55 	.word	0x08004a55
 8004a78:	08004a55 	.word	0x08004a55
 8004a7c:	08004a55 	.word	0x08004a55
 8004a80:	08004a55 	.word	0x08004a55
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004a55 	.word	0x08004a55
 8004a8c:	08004a55 	.word	0x08004a55
 8004a90:	08004a55 	.word	0x08004a55
 8004a94:	08004a55 	.word	0x08004a55
 8004a98:	08004be7 	.word	0x08004be7
 8004a9c:	08004b09 	.word	0x08004b09
 8004aa0:	08004bc9 	.word	0x08004bc9
 8004aa4:	08004a55 	.word	0x08004a55
 8004aa8:	08004a55 	.word	0x08004a55
 8004aac:	08004c09 	.word	0x08004c09
 8004ab0:	08004a55 	.word	0x08004a55
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004a55 	.word	0x08004a55
 8004abc:	08004a55 	.word	0x08004a55
 8004ac0:	08004bd1 	.word	0x08004bd1
 8004ac4:	680b      	ldr	r3, [r1, #0]
 8004ac6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	600a      	str	r2, [r1, #0]
 8004ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0a4      	b.n	8004c22 <_printf_i+0x1f6>
 8004ad8:	6825      	ldr	r5, [r4, #0]
 8004ada:	6808      	ldr	r0, [r1, #0]
 8004adc:	062e      	lsls	r6, r5, #24
 8004ade:	f100 0304 	add.w	r3, r0, #4
 8004ae2:	d50a      	bpl.n	8004afa <_printf_i+0xce>
 8004ae4:	6805      	ldr	r5, [r0, #0]
 8004ae6:	600b      	str	r3, [r1, #0]
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	da03      	bge.n	8004af4 <_printf_i+0xc8>
 8004aec:	232d      	movs	r3, #45	; 0x2d
 8004aee:	426d      	negs	r5, r5
 8004af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af4:	230a      	movs	r3, #10
 8004af6:	485e      	ldr	r0, [pc, #376]	; (8004c70 <_printf_i+0x244>)
 8004af8:	e019      	b.n	8004b2e <_printf_i+0x102>
 8004afa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004afe:	6805      	ldr	r5, [r0, #0]
 8004b00:	600b      	str	r3, [r1, #0]
 8004b02:	bf18      	it	ne
 8004b04:	b22d      	sxthne	r5, r5
 8004b06:	e7ef      	b.n	8004ae8 <_printf_i+0xbc>
 8004b08:	680b      	ldr	r3, [r1, #0]
 8004b0a:	6825      	ldr	r5, [r4, #0]
 8004b0c:	1d18      	adds	r0, r3, #4
 8004b0e:	6008      	str	r0, [r1, #0]
 8004b10:	0628      	lsls	r0, r5, #24
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0xec>
 8004b14:	681d      	ldr	r5, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0xf2>
 8004b18:	0669      	lsls	r1, r5, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0xe8>
 8004b1c:	881d      	ldrh	r5, [r3, #0]
 8004b1e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b20:	bf0c      	ite	eq
 8004b22:	2308      	moveq	r3, #8
 8004b24:	230a      	movne	r3, #10
 8004b26:	4852      	ldr	r0, [pc, #328]	; (8004c70 <_printf_i+0x244>)
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2e:	6866      	ldr	r6, [r4, #4]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	bfa8      	it	ge
 8004b34:	6821      	ldrge	r1, [r4, #0]
 8004b36:	60a6      	str	r6, [r4, #8]
 8004b38:	bfa4      	itt	ge
 8004b3a:	f021 0104 	bicge.w	r1, r1, #4
 8004b3e:	6021      	strge	r1, [r4, #0]
 8004b40:	b90d      	cbnz	r5, 8004b46 <_printf_i+0x11a>
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	d04d      	beq.n	8004be2 <_printf_i+0x1b6>
 8004b46:	4616      	mov	r6, r2
 8004b48:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b4c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b50:	5dc7      	ldrb	r7, [r0, r7]
 8004b52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b56:	462f      	mov	r7, r5
 8004b58:	42bb      	cmp	r3, r7
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	d9f4      	bls.n	8004b48 <_printf_i+0x11c>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d10b      	bne.n	8004b7a <_printf_i+0x14e>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	07df      	lsls	r7, r3, #31
 8004b66:	d508      	bpl.n	8004b7a <_printf_i+0x14e>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	6861      	ldr	r1, [r4, #4]
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	bfde      	ittt	le
 8004b70:	2330      	movle	r3, #48	; 0x30
 8004b72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b7a:	1b92      	subs	r2, r2, r6
 8004b7c:	6122      	str	r2, [r4, #16]
 8004b7e:	464b      	mov	r3, r9
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f8cd a000 	str.w	sl, [sp]
 8004b88:	aa03      	add	r2, sp, #12
 8004b8a:	f7ff fedf 	bl	800494c <_printf_common>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d14c      	bne.n	8004c2c <_printf_i+0x200>
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	b004      	add	sp, #16
 8004b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9c:	4834      	ldr	r0, [pc, #208]	; (8004c70 <_printf_i+0x244>)
 8004b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ba2:	680e      	ldr	r6, [r1, #0]
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004baa:	061f      	lsls	r7, r3, #24
 8004bac:	600e      	str	r6, [r1, #0]
 8004bae:	d514      	bpl.n	8004bda <_printf_i+0x1ae>
 8004bb0:	07d9      	lsls	r1, r3, #31
 8004bb2:	bf44      	itt	mi
 8004bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb8:	6023      	strmi	r3, [r4, #0]
 8004bba:	b91d      	cbnz	r5, 8004bc4 <_printf_i+0x198>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	f023 0320 	bic.w	r3, r3, #32
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	e7af      	b.n	8004b28 <_printf_i+0xfc>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	2378      	movs	r3, #120	; 0x78
 8004bd2:	4828      	ldr	r0, [pc, #160]	; (8004c74 <_printf_i+0x248>)
 8004bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd8:	e7e3      	b.n	8004ba2 <_printf_i+0x176>
 8004bda:	065e      	lsls	r6, r3, #25
 8004bdc:	bf48      	it	mi
 8004bde:	b2ad      	uxthmi	r5, r5
 8004be0:	e7e6      	b.n	8004bb0 <_printf_i+0x184>
 8004be2:	4616      	mov	r6, r2
 8004be4:	e7bb      	b.n	8004b5e <_printf_i+0x132>
 8004be6:	680b      	ldr	r3, [r1, #0]
 8004be8:	6826      	ldr	r6, [r4, #0]
 8004bea:	1d1d      	adds	r5, r3, #4
 8004bec:	6960      	ldr	r0, [r4, #20]
 8004bee:	600d      	str	r5, [r1, #0]
 8004bf0:	0635      	lsls	r5, r6, #24
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	d501      	bpl.n	8004bfa <_printf_i+0x1ce>
 8004bf6:	6018      	str	r0, [r3, #0]
 8004bf8:	e002      	b.n	8004c00 <_printf_i+0x1d4>
 8004bfa:	0671      	lsls	r1, r6, #25
 8004bfc:	d5fb      	bpl.n	8004bf6 <_printf_i+0x1ca>
 8004bfe:	8018      	strh	r0, [r3, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	4616      	mov	r6, r2
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	e7ba      	b.n	8004b7e <_printf_i+0x152>
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	600a      	str	r2, [r1, #0]
 8004c0e:	681e      	ldr	r6, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4630      	mov	r0, r6
 8004c14:	6862      	ldr	r2, [r4, #4]
 8004c16:	f000 f921 	bl	8004e5c <memchr>
 8004c1a:	b108      	cbz	r0, 8004c20 <_printf_i+0x1f4>
 8004c1c:	1b80      	subs	r0, r0, r6
 8004c1e:	6060      	str	r0, [r4, #4]
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	2300      	movs	r3, #0
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2a:	e7a8      	b.n	8004b7e <_printf_i+0x152>
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4640      	mov	r0, r8
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	47d0      	blx	sl
 8004c36:	3001      	adds	r0, #1
 8004c38:	d0ab      	beq.n	8004b92 <_printf_i+0x166>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	079b      	lsls	r3, r3, #30
 8004c3e:	d413      	bmi.n	8004c68 <_printf_i+0x23c>
 8004c40:	68e0      	ldr	r0, [r4, #12]
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	4298      	cmp	r0, r3
 8004c46:	bfb8      	it	lt
 8004c48:	4618      	movlt	r0, r3
 8004c4a:	e7a4      	b.n	8004b96 <_printf_i+0x16a>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4632      	mov	r2, r6
 8004c50:	4649      	mov	r1, r9
 8004c52:	4640      	mov	r0, r8
 8004c54:	47d0      	blx	sl
 8004c56:	3001      	adds	r0, #1
 8004c58:	d09b      	beq.n	8004b92 <_printf_i+0x166>
 8004c5a:	3501      	adds	r5, #1
 8004c5c:	68e3      	ldr	r3, [r4, #12]
 8004c5e:	9903      	ldr	r1, [sp, #12]
 8004c60:	1a5b      	subs	r3, r3, r1
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	dcf2      	bgt.n	8004c4c <_printf_i+0x220>
 8004c66:	e7eb      	b.n	8004c40 <_printf_i+0x214>
 8004c68:	2500      	movs	r5, #0
 8004c6a:	f104 0619 	add.w	r6, r4, #25
 8004c6e:	e7f5      	b.n	8004c5c <_printf_i+0x230>
 8004c70:	08005e01 	.word	0x08005e01
 8004c74:	08005e12 	.word	0x08005e12

08004c78 <_putc_r>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	4606      	mov	r6, r0
 8004c80:	b118      	cbz	r0, 8004c8a <_putc_r+0x12>
 8004c82:	6983      	ldr	r3, [r0, #24]
 8004c84:	b90b      	cbnz	r3, 8004c8a <_putc_r+0x12>
 8004c86:	f7ff fb5f 	bl	8004348 <__sinit>
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <_putc_r+0x84>)
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	d124      	bne.n	8004cda <_putc_r+0x62>
 8004c90:	6874      	ldr	r4, [r6, #4]
 8004c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c94:	07d8      	lsls	r0, r3, #31
 8004c96:	d405      	bmi.n	8004ca4 <_putc_r+0x2c>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	0599      	lsls	r1, r3, #22
 8004c9c:	d402      	bmi.n	8004ca4 <_putc_r+0x2c>
 8004c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ca0:	f7ff fbf0 	bl	8004484 <__retarget_lock_acquire_recursive>
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	da05      	bge.n	8004cba <_putc_r+0x42>
 8004cae:	69a2      	ldr	r2, [r4, #24]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	db1c      	blt.n	8004cee <_putc_r+0x76>
 8004cb4:	b2eb      	uxtb	r3, r5
 8004cb6:	2b0a      	cmp	r3, #10
 8004cb8:	d019      	beq.n	8004cee <_putc_r+0x76>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	6022      	str	r2, [r4, #0]
 8004cc0:	701d      	strb	r5, [r3, #0]
 8004cc2:	b2ed      	uxtb	r5, r5
 8004cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc6:	07da      	lsls	r2, r3, #31
 8004cc8:	d405      	bmi.n	8004cd6 <_putc_r+0x5e>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_putc_r+0x5e>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f7ff fbd8 	bl	8004486 <__retarget_lock_release_recursive>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <_putc_r+0x88>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d101      	bne.n	8004ce4 <_putc_r+0x6c>
 8004ce0:	68b4      	ldr	r4, [r6, #8]
 8004ce2:	e7d6      	b.n	8004c92 <_putc_r+0x1a>
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <_putc_r+0x8c>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	bf08      	it	eq
 8004cea:	68f4      	ldreq	r4, [r6, #12]
 8004cec:	e7d1      	b.n	8004c92 <_putc_r+0x1a>
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff f94e 	bl	8003f94 <__swbuf_r>
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	e7e3      	b.n	8004cc4 <_putc_r+0x4c>
 8004cfc:	08005db0 	.word	0x08005db0
 8004d00:	08005dd0 	.word	0x08005dd0
 8004d04:	08005d90 	.word	0x08005d90

08004d08 <_sbrk_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4d05      	ldr	r5, [pc, #20]	; (8004d24 <_sbrk_r+0x1c>)
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f7fb ffc2 	bl	8000c9c <_sbrk>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_sbrk_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_sbrk_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200001a0 	.word	0x200001a0

08004d28 <__sread>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	f000 f8ae 	bl	8004e90 <_read_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	bfab      	itete	ge
 8004d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d3c:	181b      	addge	r3, r3, r0
 8004d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d42:	bfac      	ite	ge
 8004d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d46:	81a3      	strhlt	r3, [r4, #12]
 8004d48:	bd10      	pop	{r4, pc}

08004d4a <__swrite>:
 8004d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	461f      	mov	r7, r3
 8004d50:	898b      	ldrh	r3, [r1, #12]
 8004d52:	4605      	mov	r5, r0
 8004d54:	05db      	lsls	r3, r3, #23
 8004d56:	460c      	mov	r4, r1
 8004d58:	4616      	mov	r6, r2
 8004d5a:	d505      	bpl.n	8004d68 <__swrite+0x1e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	f000 f868 	bl	8004e38 <_lseek_r>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	4628      	mov	r0, r5
 8004d74:	463b      	mov	r3, r7
 8004d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7e:	f000 b817 	b.w	8004db0 <_write_r>

08004d82 <__sseek>:
 8004d82:	b510      	push	{r4, lr}
 8004d84:	460c      	mov	r4, r1
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 f855 	bl	8004e38 <_lseek_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	bf15      	itete	ne
 8004d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d9e:	81a3      	strheq	r3, [r4, #12]
 8004da0:	bf18      	it	ne
 8004da2:	81a3      	strhne	r3, [r4, #12]
 8004da4:	bd10      	pop	{r4, pc}

08004da6 <__sclose>:
 8004da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004daa:	f000 b813 	b.w	8004dd4 <_close_r>
	...

08004db0 <_write_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	2200      	movs	r2, #0
 8004dba:	4d05      	ldr	r5, [pc, #20]	; (8004dd0 <_write_r+0x20>)
 8004dbc:	602a      	str	r2, [r5, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f7fb fb5e 	bl	8000480 <_write>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_write_r+0x1e>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_write_r+0x1e>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	200001a0 	.word	0x200001a0

08004dd4 <_close_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4d05      	ldr	r5, [pc, #20]	; (8004df0 <_close_r+0x1c>)
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	f7fb ff2c 	bl	8000c3c <_close>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_close_r+0x1a>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_close_r+0x1a>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	200001a0 	.word	0x200001a0

08004df4 <_fstat_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	2300      	movs	r3, #0
 8004df8:	4d06      	ldr	r5, [pc, #24]	; (8004e14 <_fstat_r+0x20>)
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	f7fb ff26 	bl	8000c52 <_fstat>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d102      	bne.n	8004e10 <_fstat_r+0x1c>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	b103      	cbz	r3, 8004e10 <_fstat_r+0x1c>
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	bd38      	pop	{r3, r4, r5, pc}
 8004e12:	bf00      	nop
 8004e14:	200001a0 	.word	0x200001a0

08004e18 <_isatty_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4d05      	ldr	r5, [pc, #20]	; (8004e34 <_isatty_r+0x1c>)
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	f7fb ff24 	bl	8000c70 <_isatty>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_isatty_r+0x1a>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_isatty_r+0x1a>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	200001a0 	.word	0x200001a0

08004e38 <_lseek_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	2200      	movs	r2, #0
 8004e42:	4d05      	ldr	r5, [pc, #20]	; (8004e58 <_lseek_r+0x20>)
 8004e44:	602a      	str	r2, [r5, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fb ff1c 	bl	8000c84 <_lseek>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_lseek_r+0x1e>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_lseek_r+0x1e>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	200001a0 	.word	0x200001a0

08004e5c <memchr>:
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	b2c9      	uxtb	r1, r1
 8004e62:	4402      	add	r2, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	d101      	bne.n	8004e6e <memchr+0x12>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e003      	b.n	8004e76 <memchr+0x1a>
 8004e6e:	7804      	ldrb	r4, [r0, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	428c      	cmp	r4, r1
 8004e74:	d1f6      	bne.n	8004e64 <memchr+0x8>
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <__malloc_lock>:
 8004e78:	4801      	ldr	r0, [pc, #4]	; (8004e80 <__malloc_lock+0x8>)
 8004e7a:	f7ff bb03 	b.w	8004484 <__retarget_lock_acquire_recursive>
 8004e7e:	bf00      	nop
 8004e80:	20000198 	.word	0x20000198

08004e84 <__malloc_unlock>:
 8004e84:	4801      	ldr	r0, [pc, #4]	; (8004e8c <__malloc_unlock+0x8>)
 8004e86:	f7ff bafe 	b.w	8004486 <__retarget_lock_release_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000198 	.word	0x20000198

08004e90 <_read_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4d05      	ldr	r5, [pc, #20]	; (8004eb0 <_read_r+0x20>)
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fb feaf 	bl	8000c02 <_read>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_read_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_read_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	200001a0 	.word	0x200001a0

08004eb4 <_init>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr

08004ec0 <_fini>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr
